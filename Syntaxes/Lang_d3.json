{
    "Language": {
        "Type": "d3 Basic",
        "Keywords": [
            {
                "key": "$chain",
                "icon": 14,
                "documentation": "The $chain statement continues FlashBASIC or BASIC compilation in a different source item.",
                "detail": "$chain $fileref $itemid",
                "snippet": "$chain ${1:fileref} ${2:itemid}"
            },
            {
                "key": "$include",
                "icon": 14,
                "documentation": "The $include statement inserts FlashBASIC or BASIC code from a separate item (known as an include item) to be compiled as part of the object module of the current program or subroutine. The original source program is not altered.",
                "detail": "$include $fileref $itemid",
                "snippet": "$include ${1:fileref} ${2:itemid}"
            },
            {
                "key": "$options",
                "icon": 14,
                "documentation": "The $options statement sets compatibility options for the FlashBASIC or BASIC compiler.",
                "detail": "$options $tag",
                "snippet": "$options ${1:tag}"
            },
            {
                "key": "%accept",
                "icon": 3,
                "documentation": "Upon successful completion, the new file descriptor is returned in code and the address and port FlashBASIC variables are updated. In the case of an error, a value of -1 is returned and the FlashBASIC system(0) function is set to the value of errno.",
                "detail": "%accept(fd, &address, &port)",
                "snippet": "%accept(${1:fd}, ${2:address}, ${3:port})"
            },
            {
                "key": "%accept_ssl",
                "icon": 3,
                "documentation": "The %accept_ssl() function first calls the %accept() function to extract the first connection on the queue of pending connections, and then creates a new socket. Thereafter, the function will wait for a TLS\/SSL Client to initiate the TLS\/SSL handshake, and then create a secure SSL connection.",
                "detail": "%accept_ssl(fd, &address, &port, certificate_file, privkey_file, &ssl_fd)",
                "snippet": "%accept_ssl(${1:fd}, ${2:address}, ${3:port}, ${4:certificate_file}, ${5:privkey_file}, ${6:ssl_fd})"
            },
            {
                "key": "%accept_starttls",
                "icon": 3,
                "documentation": "The %accept_starttls function provides the ability to elevate an unsecured connection to a secured connection.",
                "detail": "%accept_starttls(fd, &address, certificate_file, privkey_file, &SSL)",
                "snippet": "%accept_starttls(${1:fd}, ${2:address}, ${3:certificate_file}, ${4:privkey_file}, ${5:SSL})"
            },
            {
                "key": "%alarm",
                "icon": 3,
                "documentation": "The %alarm() function instructs the alarm clock of the calling process to send the signal SIGALRM to the calling process.",
                "detail": "%alarm(num)",
                "snippet": "%accept_starttls(${1:fd}, ${2:address}, ${3:certificate_file}, ${4:privkey_file}, ${5:SSL})"
            },
            {
                "key": "%bind",
                "icon": 3,
                "documentation": "The %bind() function binds a socket to a named resource. In case of a network, the resource would be an access point into the system.",
                "detail": "%bind(fd, addr.family, address, port)",
                "snippet": "%bind(${1:fd}, ${2:addr}.family, ${3:address}, ${4:port})"
            },
            {
                "key": "%calloc",
                "icon": 3,
                "documentation": "Allocates and frees dynamic memory.",
                "detail": "%calloc",
                "snippet": "%calloc"
            },
            {
                "key": "%chdir",
                "icon": 3,
                "documentation": "The %chdir() function changes the current directory to the one specified in str.",
                "detail": "%chdir(str)",
                "snippet": "%chdir(${1:str})"
            },
            {
                "key": "%chmod",
                "icon": 3,
                "documentation": "The %chmod() function changes the mode of the file str to the value specified in mode.",
                "detail": "%chmod(str, mode)",
                "snippet": "%chmod(${1:str}, ${2:mode})"
            },
            {
                "key": "%chown",
                "icon": 3,
                "documentation": "The %chown() function changes the owner-ID and group-ID of the file str to the values specified in owner and group respectively.",
                "detail": "%chown(str, owner, group)",
                "snippet": "%chown(${1:str}, ${2:owner}, ${3:group})"
            },
            {
                "key": "%close",
                "icon": 3,
                "documentation": "The %close() function closes the UNIX file specified by file.descriptor returned by a previous call to %open(), %creat(), %dup(), %socket(), or %accept()",
                "detail": "%close(file.descriptor)",
                "snippet": "%close(${1:fd})"
            },
            {
                "key": "%close_ssl",
                "icon": 3,
                "documentation": "The %close_ssl function closes the socket specified by the fd file descriptor, as well as the secure connection specified by the ssl_fd descriptor. The fd file descriptor is returned by a previous call to %socket whereas the ssl_fd descriptor is returned buy a previous call to %accept_ssl() or %connect_ssl.",
                "detail": "%close_ssl(fd, ssl_fd)",
                "snippet": "%close_ssl(${1:fd}, ${2:ssl_fd})"
            },
            {
                "key": "%closeall",
                "icon": 3,
                "documentation": "The %closeall() function closes all opened file-descriptors, including sockets.",
                "detail": "%closeall()",
                "snippet": "%closeall()"
            },
            {
                "key": "%closesocket",
                "icon": 3,
                "documentation": "The %closesocket() function closes an existing socket.",
                "detail": "%closesocket()",
                "snippet": "%closesocket()"
            },
            {
                "key": "%connect",
                "icon": 3,
                "documentation": "The %connect() function requests a connection between two sockets.",
                "detail": "%connect(fd, addr.family, host, port)",
                "snippet": "%connect(${1:fd}, ${2:addrfamily}, ${3:host}, ${4:port})"
            },
            {
                "key": "%connect_ssl",
                "icon": 3,
                "documentation": "The %connect_ssl() function requests a secure connection between two sockets.",
                "detail": "%connect_ssl(fd, addr.family, host, port, &ssl_fd)",
                "snippet": "%connect_ssl(${1:fd}, ${2:addrfamily}, ${3:host}, ${4:port}, ${5:ssl_fd})"
            },
            {
                "key": "%connect_starttls",
                "icon": 3,
                "documentation": "The %connect_starttls function provides the ability to elevate an unsecured connection to a secured connection.",
                "detail": "%connect_starttls(fd, &SSL)",
                "snippet": "%connect_starttls(${1:fd}, ${2:SSL})"
            },
            {
                "key": "%creat",
                "icon": 3,
                "documentation": "The %creat() function creates a new host OS file or prepares to rewrite an existing host OS file designated by str for write only.",
                "detail": "%creat(str, mode)",
                "snippet": "%creat(${1:str}, ${2:mode})"
            },
            {
                "key": "%decrypt",
                "icon": 3,
                "documentation": "The %decrypt() function decrypts a string. The OpenSSL and OpenSSL-devel libraries must be loaded to use this function.",
                "detail": "%decrypt(params, inputstring, outputstring, &outputstring length)",
                "snippet": "%decrypt(${1:params}, ${2:inputstring}, ${3:outputstring}, ${4:outputstring} ${5:length})"
            },
            {
                "key": "%dup",
                "icon": 3,
                "documentation": "The %dup() function returns a new file descriptor associated to the same file as the one associated with file.descriptor.",
                "detail": "%dup(file.descriptor)",
                "snippet": "%dup(${1:filedescriptor})"
            },
            {
                "key": "%encrypt",
                "icon": 3,
                "documentation": "The %encrypt() function encrypts a string. The OpenSSL and OpenSSL-devel libraries must be loaded to use this function.",
                "detail": "%encrypt(params, inputstring, outputstring, &outputstring length)",
                "snippet": "%encrypt(${1:params}, ${2:inputstring}, ${3:outputstring}, ${4:outputstringlength})"
            },
            {
                "key": "%endlistilocks",
                "icon": 3,
                "documentation": "The %endlistilocks() function is used to release the handle allocated by the %startlistilocks() function.",
                "detail": "%endlistilocks(handle)",
                "snippet": "%endlistilocks(${1:handle})"
            },
            {
                "key": "%fclose",
                "icon": 3,
                "documentation": "The %fclose() function closes the stream specified by stream returned by a previous call to %fopen().",
                "detail": "%fclose((char*)stream)",
                "snippet": "%fclose(${1:stream})"
            },
            {
                "key": "%fdopen",
                "icon": 3,
                "documentation": "The %fdopen() function associates a stream with the file.descriptor obtained from an %open(), %dup(), or %creat().",
                "detail": "%fdopen(file.descriptor, type)",
                "snippet": "%fdopen(${1:filedescriptor}, ${2:type})"
            },
            {
                "key": "%fgetc",
                "icon": 3,
                "documentation": "The %fgetc() function returns the next character from the named input stream.",
                "detail": "%fgetc((char*)strea)m",
                "snippet": "%fgetc(${1:stream})"
            },
            {
                "key": "%fgets",
                "icon": 3,
                "documentation": "The %fgets() function reads characters from the named input stream into var until n-1 characters are read or a new line character is read and transferred to the string.",
                "detail": "%fgets(var, n, (char*)stream)",
                "snippet": "%fgets(${1:var}, ${2:n}, ${3:stream})"
            },
            {
                "key": "%filecheck",
                "icon": 3,
                "documentation": "The %filecheck() function can be run from the TCL to call the system fsck (file system check) command.",
                "detail": "%filecheck(arg, error_count)",
                "snippet": "%filecheck(${1:arg}, ${2:error_count})"
            },
            {
                "key": "%fopen",
                "icon": 3,
                "documentation": "The %fopen() function opens the host OS file designated by str and associates a stream with it.",
                "detail": "%fopen(str, type)",
                "snippet": "%fopen(${1:str}, ${2:type})"
            },
            {
                "key": "%fprintf",
                "icon": 3,
                "documentation": "The %fprintf() function writes formatted output on stream under control of format.",
                "detail": "%fprintf((char*)stream, format, arg...)",
                "snippet": "%fprintf(${1:stream}, ${2:format}, ${3:args})"
            },
            {
                "key": "%fputc",
                "icon": 3,
                "documentation": "The %fputc() function writes the character specified by character on the named output stream.",
                "detail": "%fputc(character, (char*)stream)",
                "snippet": "%fputc(${1:character}, ${2:stream})"
            },
            {
                "key": "%fputs",
                "icon": 3,
                "documentation": "The %fputs() function writes the string designated by str on the named output stream.",
                "detail": "%fputs(str, (char*)stream)",
                "snippet": "%fputs(${1:str}, ${2:stream})"
            },
            {
                "key": "%fread",
                "icon": 3,
                "documentation": "Binary stream input\/output.",
                "detail": "%fread()",
                "snippet": "%fread()"
            },
            {
                "key": "%free",
                "icon": 3,
                "documentation": "The %free() function frees a block of memory allocated by a call to %malloc().",
                "detail": "%free((char*)pointer)",
                "snippet": "%free(${1:pointer})"
            },
            {
                "key": "%freopen",
                "icon": 3,
                "documentation": "The %freopen() function substitutes the named file specified by str in place of the opened stream stream1.",
                "detail": "%freopen(str, type, (char*)stream1)",
                "snippet": "%freopen(${1:str}, ${2:type}, ${3:stream1})"
            },
            {
                "key": "%fsize",
                "icon": 3,
                "documentation": "The %fsize() function returns the size in bytes of the file associated to the opened file.descriptor returned by a previous call to %open() or %creat().",
                "detail": "%fsize(file.descriptor)",
                "snippet": "%fsize(${1:filedescriptor})"
            },
            {
                "key": "%fwrite",
                "icon": 3,
                "documentation": "Binary stream input\/output.",
                "detail": "%fwrite()",
                "snippet": "%fwrite()"
            },
            {
                "key": "%getaddrinfo",
                "icon": 3,
                "documentation": "Front end to the socket %getaddrinfo() function.",
                "detail": "%getaddrinfo(server, outlist)",
                "snippet": "%getaddrinfo(${1:server}, ${2:outlist})"
            },
            {
                "key": "%getenv",
                "icon": 3,
                "documentation": "The %getenv() function searches the environment for a string of the form name=value and returns a pointer to value in the current environment if such a string is present, otherwise, a null is returned.",
                "detail": "%getenv(name)",
                "snippet": "%getenv(${1:name})"
            },
            {
                "key": "%gethostid",
                "icon": 3,
                "documentation": "The %gethostid() function allows a FlashBASIC application to retrieve the unique 32-bit identifier for the current host. The ID is returned as a decimal number.",
                "detail": "%gethostid()",
                "snippet": "%gethostid()"
            },
            {
                "key": "%gethostname",
                "icon": 3,
                "documentation": "The %gethostname() function retrieves the standard host name for the local computer.",
                "detail": "%gethostname()",
                "snippet": "%gethostname()"
            },
            {
                "key": "%getnamedhost",
                "icon": 3,
                "documentation": "Front end to the socket %gethostbyname() function.",
                "detail": "%getnamedhos(host)",
                "snippet": "%getnamedhos(${1:host})"
            },
            {
                "key": "%getperfcount",
                "icon": 3,
                "documentation": "The %getperfcount() function returns the D3 performance counters.",
                "detail": "%getperfcount(buffer, MAXBUF)",
                "snippet": "%getperfcount(${1:buffer}, ${2:MAXBUF})"
            },
            {
                "key": "%getpgrp",
                "icon": 3,
                "documentation": "The %getpgrp() function returns the UNIX process group ID of the calling process.",
                "detail": "%getpgrp()",
                "snippet": "%getpgrp()"
            },
            {
                "key": "%getpid",
                "icon": 3,
                "documentation": "The %getpid() function returns the Process-ID (PID) of the calling process.",
                "detail": "%getpid()",
                "snippet": "%getpid()"
            },
            {
                "key": "%getppid",
                "icon": 3,
                "documentation": "The %getppid() function returns the UNIX parent Process-ID of the calling process.",
                "detail": "%getppid()",
                "snippet": "%getppid()"
            },
            {
                "key": "%getsockopt",
                "icon": 3,
                "documentation": "The %getsockopt() function retrieves a socket option.",
                "detail": "%getsockopt()",
                "snippet": "%getsockopt()"
            },
            {
                "key": "%inet_addr",
                "icon": 3,
                "documentation": "The %inet_addr() function converts a string containing an IPv4 dotted-decimal address into a proper address for the IN_ADDR structure.",
                "detail": "%inet_addr()",
                "snippet": "%inet_addr()"
            },
            {
                "key": "%ioctl",
                "icon": 3,
                "documentation": "The %ioctl() function is a general purpose control function that passes the arguments request and arg to the device designated by file.descriptor.",
                "detail": "%ioctl(file.descriptor, request, arg)",
                "snippet": "%ioctl(${1:filedescriptor}, ${2:request}, ${3:arg})"
            },
            {
                "key": "%ioctlsocket",
                "icon": 3,
                "documentation": "The %ioctlsocket() function controls the I\/O mode of a socket.",
                "detail": "%ioctlsocket()",
                "snippet": "%ioctlsocket()"
            },
            {
                "key": "%kill",
                "icon": 3,
                "documentation": "The %kill() function sends the signal specified in signal to the process pid.",
                "detail": "%kill(pid, signal)",
                "snippet": "%kill(${1:pid}, ${2:signal})"
            },
            {
                "key": "%listen",
                "icon": 3,
                "documentation": "The %listen() function marks the specified socket as accepting incoming connections and limits the number of outstanding connections in the system queue.",
                "detail": "%listen(fd, backlog)",
                "snippet": "%listen(${1:fd}, ${2:backlog})"
            },
            {
                "key": "%listitemlocksfilter",
                "icon": 3,
                "documentation": "The listitemlocksfilter() function is used to get a list of the FSI item locks in a dynamic array format.",
                "detail": "%listitemlocksfilter( handle, filter, buffer, bufferLength )",
                "snippet": "%listitemlocksfilter(${1:handle}, ${2:filter}, ${3:buffer}, ${4:bufferLength})"
            },
            {
                "key": "%lseek",
                "icon": 3,
                "documentation": "The %lseek() function moves the read\/write pointer. See your host OS system documentation.",
                "detail": "%lseek(file.descriptor, offset, whence)",
                "snippet": "%lseek(${1:filedescriptor}, ${2:offset}, ${3:whence})"
            },
            {
                "key": "%malloc",
                "icon": 3,
                "documentation": "The %malloc() function allocates a memory block of size bytes and returns the address of this block.",
                "detail": "%malloc(size)",
                "snippet": "%malloc(${1:size})"
            },
            {
                "key": "%memccpy",
                "icon": 3,
                "documentation": "Copies the memory area.",
                "detail": "%memcopy()",
                "snippet": "%memcopy()"
            },
            {
                "key": "%memchr",
                "icon": 3,
                "documentation": "Scans memory for a character.",
                "detail": "%memchr()",
                "snippet": "%memchr()"
            },
            {
                "key": "%memcopy",
                "icon": 3,
                "documentation": "The %memcopy() function copies characters from the memory area specified by s2 into s1, stopping after the first occurrence of the character designated by character has been copied, or after the number of characters specified by length have been copied, whichever comes first.",
                "detail": "%memcopy(s1, s2, (char) character, length)",
                "snippet": "%memcopy(${1:s1}, ${2:s2}, ${3:character}, ${4:length})"
            },
            {
                "key": "%memcpy",
                "icon": 3,
                "documentation": "The %memcpy() function copies the number of characters specified by number from memory area s2 into s1.",
                "detail": "%memcpy(s1, s2, length)",
                "snippet": "%memcpy(${1:s1}, ${2:s2}, ${3:length})"
            },
            {
                "key": "%memxcpy",
                "icon": 3,
                "documentation": "The %memxcpy() function copies a specified number of characters from memory area s2 into s1, and converts each input character into two ASCII hexadecimal characters 0 through 9 and A through F.",
                "detail": "%memxcpy(s1, s2, length)",
                "snippet": "%memxcpy(${1:s1}, ${2:s2}, ${3:length})"
            },
            {
                "key": "%open",
                "icon": 3,
                "documentation": "The %open() function opens the host OS file specified by str and sets the file status flags according to the value of oflag.",
                "detail": "%open(str, oflag, pmode)",
                "snippet": "%open(${1:str}, ${2:oflag}, ${3:pmode})"
            },
            {
                "key": "%pause",
                "icon": 3,
                "documentation": "The %pause() function suspends the calling process until it receives a signal.",
                "detail": "%pause()",
                "snippet": "%pause()"
            },
            {
                "key": "%pclose",
                "icon": 3,
                "documentation": "The %pclose() function closes the stream designated by stream opened by a %popen() and returns the exit status of the command.",
                "detail": "%pclose((char*)stream)",
                "snippet": "%pclose(${1:stream})"
            },
            {
                "key": "%pgetpid",
                "icon": 3,
                "documentation": "The %pgetpid() function returns the UNIX Process-ID (PID) associated to the D3 process line.",
                "detail": "%pgetpid(line)",
                "snippet": "%pgetpid(${1:line})"
            },
            {
                "key": "%popen",
                "icon": 3,
                "documentation": "The %popen() function creates a pipe between the calling process and the command to be executed.",
                "detail": "%popen(command, type)",
                "snippet": "%popen(${1:command}, ${2:type})"
            },
            {
                "key": "%printf",
                "icon": 3,
                "documentation": "Formatted output conversion",
                "detail": "%printf()",
                "snippet": "%printf()"
            },
            {
                "key": "%putenv",
                "icon": 3,
                "documentation": "The %putenv() function makes the value of the environment variable name equal to the value designated by str, by altering an existing variable or by creating a new one.",
                "detail": "%putenv(str)",
                "snippet": "%putenv(${1:str})"
            },
            {
                "key": "%rdhex",
                "icon": 3,
                "documentation": "The %rdhex() function reads the number of bytes designated by (size * 2) into var from the file specified in file.descriptor, converting each byte into two ASCII hexadecimal characters.",
                "detail": "%rdhex(file.descriptor, var, size)",
                "snippet": "%rdhex(${1:filedescriptor}, ${2:var}, ${3:size})"
            },
            {
                "key": "%read",
                "icon": 3,
                "documentation": "The %read() function reads the number of bytes designated in size into var, from the file specified by file.descriptor. This file is returned by a previous call to %open(), %creat(), or %dup().",
                "detail": "%read(file.descriptor, var, size)",
                "snippet": "%read(${1:filedescriptor}, ${2:var}, ${3:size})"
            },
            {
                "key": "%read_ssl",
                "icon": 3,
                "documentation": "The %read_ssl() function reads the number of bytes designated in size into var, from the Secure connection specified by ssl_fd descriptor. This descriptor is returned by a previous call to %accept_ssl() or %connect_ssl.",
                "detail": "%read_ssl(ssl_fd, var, size)",
                "snippet": "%read_ssl(${1:ssl_fd}, ${2:var}, ${3:size})"
            },
            {
                "key": "%readregistry",
                "icon": 3,
                "documentation": "The %readregistry() function retrieves string values from the registry.",
                "detail": "%readregistry(registryEntry, valueName, buffer, &bufferSize)",
                "snippet": "%readregistry(${1:registryEntry}, ${2:valueName}, ${3:buffer}, ${4:bufferSize})"
            },
            {
                "key": "%realloc",
                "icon": 3,
                "documentation": "The %realloc() function resizes the memory buffer specified to the specified size in bytes and returns a pointer to the resized buffer. The contents of the buffer are not changed. If buffer is null, this function behaves like the %malloc() function for the specified size. If the specified size is zero and the specified buffer is not null, the buffer memory is freed.",
                "detail": "%realloc((char*)buffer, size)",
                "snippet": "%realloc(${1:buffer}, ${2:size})"
            },
            {
                "key": "%recv",
                "icon": 3,
                "documentation": "The %recv() function receives data from a connected socket or a bound connectionless socket.",
                "detail": "%recv()",
                "snippet": "%recv()"
            },
            {
                "key": "%recvfrom",
                "icon": 3,
                "documentation": "The %recvfrom() function receives a datagram from a bound socket and stores the information on the sender. If no errors occur, the number of bytes received is returned.",
                "detail": "%recvfrom(socket, buffer, bufferLength, flags, &sourceAddress, &port)",
                "snippet": "%recvfrom(${1:socket}, buffer, ${2:bufferLength}, ${3:flags}, ${4:sourceAddress}, ${5:port})"
            },
            {
                "key": "%semctl",
                "icon": 3,
                "documentation": "The %semctl() function performs semaphore control operations.",
                "detail": "%semctl(sem-ID, semnum, cmd, arg)",
                "snippet": "%semctl(${1:sem}-ID, ${2:semnum}, ${3:cmd}, ${4:arg})"
            },
            {
                "key": "%semget",
                "icon": 3,
                "documentation": "The %semget() function creates a semaphore set.",
                "detail": "%semget(key, nsems, semflg)",
                "snippet": "%semget(${1:key}, ${2:nsems}, ${3:semflg})"
            },
            {
                "key": "%semop",
                "icon": 3,
                "documentation": "The %semop() function performs an array of semaphore operations on a set of semaphores.",
                "detail": "%semop(sem-ID, sops, num)",
                "snippet": "%semop(${1:sem}-ID, ${2:sops}, ${3:num})"
            },
            {
                "key": "%send",
                "icon": 3,
                "documentation": "The %send() function sends data on a connected socket.",
                "detail": "%send()",
                "snippet": "%send()"
            },
            {
                "key": "%sendto",
                "icon": 3,
                "documentation": "The %sendto() sends data to a specified destination. If no errors occur, the total number of bytes sent is returned.",
                "detail": "%sendto(socket, buffer, buflen, flags, HostName, port)",
                "snippet": "%sendto(${1:socket}, ${2:buffer}, ${3:buflen}, ${4:flags}, ${5:HostName}, ${6:port})"
            },
            {
                "key": "%setflush",
                "icon": 3,
                "documentation": "The %setflush() function sets the flush periods.",
                "detail": "%setflush(newp, newfp)",
                "snippet": "%setflush(${1:newp}, ${2:newfp})"
            },
            {
                "key": "%setsockopt",
                "icon": 3,
                "documentation": "The %setsockopt() function sets a socket option.",
                "detail": "%setsockopt()",
                "snippet": "%setsockopt()"
            },
            {
                "key": "%shell",
                "icon": 3,
                "documentation": "The %shell() function executes the MS-DOS command, command, and returns the exit code of the command.",
                "detail": "%shell (command)",
                "snippet": "%shell (${1:command})"
            },
            {
                "key": "%shellcapture",
                "icon": 3,
                "documentation": "The %shellcapture() function executes the MS-DOS command, command, and captures the result in the buffer variable, up to the maximum size. If the buffer is not large enough, the exceeding output is discarded.",
                "detail": "%shellcapture(command, buffer, size, read)",
                "snippet": "%shellcapture(${1:command}, ${2:buffer}, ${3:size}, ${4:read})"
            },
            {
                "key": "%shmat",
                "icon": 3,
                "documentation": "The %shmat() function attaches a shared memory segment associated with the shared memory identifier shmid and returns the address of the segment.",
                "detail": "%shmat(shmid, (char*)shmaddr, shmflg)",
                "snippet": "%shmat(${1:shmid}, ${2:shmaddr}, ${3:shmflg})"
            },
            {
                "key": "%shmctl",
                "icon": 3,
                "documentation": "Allows the user to receive information on a shared memory segment, set the owner, group, and  permissions of a shared memory segment, or destroy a segment.",
                "detail": "%shmctl()",
                "snippet": "%shmctl()"
            },
            {
                "key": "%shmdt",
                "icon": 3,
                "documentation": "The %shmdt() function detaches the shared memory segment located at the address specified by shmaddr.",
                "detail": "%shmdt((char*)shmaddr)",
                "snippet": "%shmdt(${1:shmaddr})"
            },
            {
                "key": "%shmget",
                "icon": 3,
                "documentation": "The %shmget() function creates a shared memory segment and returns a shared memory identifier.",
                "detail": "%shmget(key, size, shmflg)",
                "snippet": "%shmget(${1:key}, ${2:size}, ${3:shmflg})"
            },
            {
                "key": "%shutdown",
                "icon": 3,
                "documentation": "The %shutdown() function disables sends or receives on a socket.",
                "detail": "%shutdown()",
                "snippet": "%shutdown()"
            },
            {
                "key": "%socket",
                "icon": 3,
                "documentation": "The %socket() function creates a socket in the specified addr.family and of the specified type. A protocol can be specified or assigned by the system. If the protocol is left unspecified (with a value of 0), the system selects an appropriate protocol in the specified addr.family.",
                "detail": "%socket(addr.family, type, protocol)",
                "snippet": "%socket(${1:addrfamily}, ${2:type}, ${3:protocol})"
            },
            {
                "key": "%sprintf",
                "icon": 3,
                "documentation": "Formatted output conversion.",
                "detail": "%sprintf()",
                "snippet": "%sprintf()"
            },
            {
                "key": "%startfileio",
                "icon": 3,
                "documentation": "Specifies that all input comes from the input file and all output goes to the output file.",
                "detail": "%startfileio(file path names)",
                "snippet": "%startfileio(${1:file_path_names})"
            },
            {
                "key": "%startlistilocks",
                "icon": 3,
                "documentation": "The %startlistilocks() function prepares for calls to the %listitemlocksfilter() function and the %endlistilocks() function.",
                "detail": "%startlistilocks( hostFSI, &handle )",
                "snippet": "%startlistilocks(${1:hostFSI}, ${2:handle} )"
            },
            {
                "key": "%stopfileio",
                "icon": 3,
                "documentation": "Stops all input and output to and from the file. The FlashBASIC tab of the D3 Device Manager contains the default path of the input and output files (see the D3 System Administration Guide for more information).",
                "detail": "%stopfileio()",
                "snippet": "%stopfileio()"
            },
            {
                "key": "%strcat",
                "icon": 3,
                "documentation": "Concatenates two strings.",
                "detail": "%strcat()",
                "snippet": "%strcat()"
            },
            {
                "key": "%strcpy",
                "icon": 3,
                "documentation": "Copies a string.",
                "detail": "%strcpy()",
                "snippet": "%strcpy()"
            },
            {
                "key": "%strlen",
                "icon": 3,
                "documentation": "Calculates the length of a string.",
                "detail": "%strlen()",
                "snippet": "%strlen()"
            },
            {
                "key": "%ttyname",
                "icon": 3,
                "documentation": "The %ttyname() function returns a pointer to a static area containing the null terminated path name of the terminal device associated to the file descriptor fd.",
                "detail": "%ttyname(fd)",
                "snippet": "%ttyname(${1:fd})"
            },
            {
                "key": "%unlink",
                "icon": 3,
                "documentation": "The %unlink() function removes the directory entry named by the path name pointed to by path. The named file is unlinked, and when all the links have been removed, and the file is no longer open, the file is removed.",
                "detail": "%unlink(path)",
                "snippet": "%unlink(${1:path})"
            },
            {
                "key": "%wait",
                "icon": 3,
                "documentation": "The %wait() function returns the exit code of the child processes created by the current process.",
                "detail": "%wait(&status)",
                "snippet": "%wait(${1:status})"
            },
            {
                "key": "%whex",
                "icon": 3,
                "documentation": "The %whex() function writes to the file specified by file.descriptor returned by a previous call to %open(), %creat(), or %dup() a string of bytes resulting from converting the ASCII string variable into binary.",
                "detail": "%whex(file.descriptor, var)",
                "snippet": "%whex(${1:filedescriptor}, ${2:var})"
            },
            {
                "key": "%write",
                "icon": 3,
                "documentation": "The %write() function writes the number of bytes designated by size from var to the file specified by file.descriptor returned by a previous call to %open(), %creat(), or %dup().",
                "detail": "%write(file.descriptor, var, size)",
                "snippet": "%write(${1:filedescriptor}, ${2:var}, ${3:size})"
            },
            {
                "key": "%write_ssl",
                "icon": 3,
                "documentation": "The %write_ssl() function writes the number of bytes designated by size from var to the Secure connection specified by ssl_fd descriptor. This descriptor is returned by a previous call to %accept_ssl() or %connect_ssl.",
                "detail": "%write_ssl(ssl.fd, var, size)",
                "snippet": "%write_ssl(${1:sslfd}, ${2:var}, ${3:size})"
            },
            {
                "key": "Abort",
                "icon": 14,
                "documentation": "The abort statement immediately stops program execution and unconditionally returns to the TCL command prompt.",
                "detail": "ABORT $messagenum, $expr",
                "snippet": "ABORT ${1:messagenum}, ${2:expr}"
            },
            {
                "key": "Abs",
                "icon": 3,
                "documentation": "The abs() function returns the absolute (positive) portion of the integer number derived from the given numeric expression.",
                "detail": "ABS($math_expression)",
                "snippet": "ABS(${1:math_expression})"
            },
            {
                "key": "Access",
                "icon": 3,
                "documentation": "The access() function provides data about the AQL or Update processor environments when the program is called from a dictionary.",
                "detail": "ACCESS($numexp)",
                "snippet": "ACCESS(${1:numexp})"
            },
            {
                "key": "Alpha",
                "icon": 3,
                "documentation": "The alpha() function evaluates the expression and returns 1 (true) if every character in the string is alphabetical (that is, a\u2014z upper and lowercase), or 0 (false) if any character is nonalphabetical.",
                "detail": "ALPHA($value)",
                "snippet": "ALPHA(${1:value})"
            },
            {
                "key": "Ascii",
                "icon": 3,
                "documentation": "The ascii() function converts a string of EBCDIC-encoded characters into their equivalent ASCII values.",
                "detail": "ASCII($expr)",
                "snippet": "ASCII(${1:expr})"
            },
            {
                "key": "Assigned",
                "icon": 3,
                "documentation": "The assigned() function determines if the variable has been assigned a value.",
                "detail": "ASSIGNED($variable)",
                "snippet": "ASSIGNED(${1:variable})"
            },
            {
                "key": "Aux",
                "icon": 14,
                "documentation": "The aux statement enables or disables spooling to the auxiliary port.",
                "detail": "AUX $exp",
                "snippet": "AUX ${1:exp}"
            },
            {
                "key": "Begin Case",
                "icon": 14,
                "documentation": "The begin case statement starts a case construct.",
                "detail": "BEGIN CASE\n\tCASE $1\n\t\t$2\nEND CASE",
                "snippet": "BEGIN CASE\n\tCASE $1\n\t\t$2\nEND CASE"
            },
            {
                "key": "Begin Work",
                "icon": 14,
                "documentation": "The begin work statement starts a transaction.",
                "detail": "BEGIN WORK $name THEN\n\t$then_statements\nEND ELSE\n\t$else_statements\nEND",
                "snippet": "BEGIN WORK ${1:name} THEN\n\t${2:then_statements}\nEND ELSE\n\t${3:else_statements}\nEND"
            },
            {
                "key": "Break",
                "icon": 14,
                "documentation": "The break statement enables or disables the BREAK key.",
                "detail": "BREAK $1",
                "snippet": "BREAK $1"
            },
            {
                "key": "Call",
                "icon": 14,
                "documentation": "The call statement transfers control to an external FlashBASIC or BASIC subroutine and optionally passes a list of arguments to it.",
                "detail": "CALL $subroutine_name($arguments)",
                "snippet": "CALL ${1:subroutine_name}(${2:arguments})"
            },
            {
                "key": "Casing",
                "icon": 14,
                "documentation": "The casing statement toggles case sensitivity relative to input data and string comparisons in the current program and any called subroutines.",
                "detail": "CASING $1",
                "snippet": "CASING $1"
            },
            {
                "key": "Cfunction",
                "icon": 14,
                "documentation": "The cfunction statement provides access to C libraries from BASIC.",
                "detail": "CFUNCTION $names",
                "snippet": "CFUNCTION ${1:names}"
            },
            {
                "key": "Chain",
                "icon": 14,
                "documentation": "The chain statement transfers processing control to TCL, which interprets and executes the statement defined in the expression.",
                "detail": "CHAIN $expr",
                "snippet": "CHAIN ${1:expr}"
            },
            {
                "key": "Change",
                "icon": 3,
                "documentation": "The change() function searches a string expression for the search string and then, if at the start occurrence, replaces search.str with replacement.str for the amount of occurrences specified in occurrences.",
                "detail": "CHANGE($string, $search, $replace, $occurrence, $start)",
                "snippet": "CHANGE(${1:string}, ${2:search}, ${3:replace}, ${4:occurrence}, ${5:start})"
            },
            {
                "key": "Char",
                "icon": 3,
                "documentation": "The char() function converts a number between 0 and 255 to its corresponding ASCII character equivalent.",
                "detail": "CHAR($expr)",
                "snippet": "CHAR(${1:expr})"
            },
            {
                "key": "Clear",
                "icon": 14,
                "documentation": "The clear statement sets all local and common variables to 0 in a main program.",
                "detail": "CLEAR",
                "snippet": "CLEAR"
            },
            {
                "key": "Cleardata",
                "icon": 14,
                "documentation": "The cleardata statement clears the data stack.",
                "detail": "CLEARDATA",
                "snippet": "CLEARDATA"
            },
            {
                "key": "Clearfile",
                "icon": 14,
                "documentation": "The clearfile statement deletes all items in the specified file variable previously opened with an open statement.",
                "detail": "CLEARFILE $variable",
                "snippet": "CLEARFILE ${1:variable}"
            },
            {
                "key": "Clearselect",
                "icon": 14,
                "documentation": "The clearselect statement clears the active select-list specified by the list.var and releases all overflow associated with that list. Any external select-list is also cleared if the list variable is not specified.",
                "detail": "CLEARSELECT $ListName",
                "snippet": "CLEARSELECT ${1:ListName}"
            },
            {
                "key": "Close",
                "icon": 14,
                "documentation": "The close statement closes the file identified by file.var. If file.var is not specified, the file referenced by the default file.var is closed.",
                "detail": "CLOSE $variable",
                "snippet": "CLOSE ${1:variable}"
            },
            {
                "key": "Col1",
                "icon": 3,
                "documentation": "The col1() function returns the numeric column position of the character immediately preceding the substring retrieved in the most recently executed field() function.",
                "detail": "COL1()",
                "snippet": "COL1()"
            },
            {
                "key": "Col2",
                "icon": 3,
                "documentation": "The col2() function returns the numeric column position of the character following the substring retrieved in the most recently executed field() function.",
                "detail": "COL2()",
                "snippet": "COL2()"
            },
            {
                "key": "Commit Work",
                "icon": 14,
                "documentation": "The commit work operation commits a transaction.",
                "detail": "COMMIT WORK THEN\n\t$then_statements\nEND ELSE\n\t$else_statements\nEND",
                "snippet": "COMMIT WORK THEN\n\t${1:then_statements}\nEND ELSE\n\t${2:else_statements}\nEND"
            },
            {
                "key": "Common",
                "icon": 14,
                "documentation": "The common statement declares data elements to share among different FlashBASIC or BASIC modules.",
                "detail": "COMMON $1",
                "snippet": "COMMON $1"
            },
            {
                "key": "Com",
                "icon": 14,
                "documentation": "The common statement declares data elements to share among different FlashBASIC or BASIC modules.",
                "detail": "COM $1",
                "snippet": "COM $1"
            },
            {
                "key": "Compare",
                "icon": 14,
                "documentation": "The compare statement compares two dynamic arrays.",
                "detail": "COMPARE $str1 TO $str2",
                "snippet": "COMPARE ${1:str1} TO ${2:str2}"
            },
            {
                "key": "ComparePresent",
                "icon": 14,
                "documentation": "The compare statement compares two dynamic arrays.",
                "detail": "COMPARE $str1 TO $str2 PRESENT $exist MISSING $missing",
                "snippet": "COMPARE ${1:str1} TO ${2:str2} PRESENT ${3:exist} MISSING ${4:missing}"
            },
            {
                "key": "Continue",
                "icon": 14,
                "documentation": "The continue statement restarts a loop that is under for...next or loop...repeat control.",
                "detail": "CONTINUE",
                "snippet": "CONTINUE"
            },
            {
                "key": "Convert",
                "icon": 14,
                "documentation": "The convert statement searches a given variable and replaces each occurrence of a character by another.",
                "detail": "CONVERT $fromchars TO $tostring IN $var",
                "snippet": "CONVERT ${1:fromchars} TO ${2:tostring} IN ${3:var}"
            },
            {
                "key": "ConvertFunc",
                "icon": 3,
                "documentation": "The convert statement searches a given variable and replaces each occurrence of a character by another.",
                "detail": "CONVERT($var, $str1, $str2)",
                "snippet": "CONVERT(${1:var}, ${2:str1}, ${3:str2})"
            },
            {
                "key": "Cos",
                "icon": 3,
                "documentation": "The cos() function calculates the trigonometric cosine of an angle of a specified numeric expression in the range 0 to 360 degrees.",
                "detail": "COS($expr)",
                "snippet": "COS(${1:expr})"
            },
            {
                "key": "Count",
                "icon": 3,
                "documentation": "The count() function returns the number of occurrences of str.exp2 within str.exp1.",
                "detail": "COUNT($expr, $delimiter)",
                "snippet": "COUNT(${1:expr}, ${2:delimiter})"
            },
            {
                "key": "Crt",
                "icon": 14,
                "documentation": "The crt statement outputs unconditionally to the terminal display, regardless of whether or not the printer on condition is in effect.",
                "detail": "CRT $expr",
                "snippet": "CRT ${1:expr}"
            },
            {
                "key": "Crt @",
                "icon": 14,
                "documentation": "The crt statement outputs unconditionally to the terminal display, regardless of whether or not the printer on condition is in effect.",
                "detail": "CRT @($col, $row):$expr",
                "snippet": "CRT @(${1:col}, ${2:row}):${3:expr}"
            },
            {
                "key": "Crt-device",
                "icon": 14,
                "documentation": "The crt-device statement forces BASIC and FlashBASIC to use the CRT terminal device instead of the printer device for the @ functions with the printer in the ON state.",
                "detail": "crt-device  {([n|f]}",
                "snippet": "crt-device  ${1:n}"
            },
            {
                "key": "Data",
                "icon": 14,
                "documentation": "The data statement queues responses for use by subsequent input requests initiated from chain, enter, execute, or input statements. The data is taken from the queue in the order in which it was added.",
                "detail": "DATA $expr",
                "snippet": "DATA ${1:expr}"
            },
            {
                "key": "Date",
                "icon": 3,
                "documentation": "The date() function returns the current system date in internal format as an integer number representing the number of days that have elapsed since December 31, 1967 (day 0 on the D3 calendar).",
                "detail": "DATE()",
                "snippet": "DATE()"
            },
            {
                "key": "Dcount",
                "icon": 3,
                "documentation": "The dcount() function returns the number of occurrences of the delimiter specified in str.exp2 within str.exp1, plus one.",
                "detail": "DCOUNT($expr, $delimiter)",
                "snippet": "DCOUNT(${1:expr}, ${2:delimiter})"
            },
            {
                "key": "Debug",
                "icon": 14,
                "documentation": "The debug statement temporarily suspends execution of a FlashBASIC or BASIC program and invokes the FlashBASIC or BASIC debugger.",
                "detail": "DEBUG",
                "snippet": "DEBUG"
            },
            {
                "key": "Deffun",
                "icon": 14,
                "documentation": "Use the deffun statement to define a user-written function. You must declare a user-defined function before you can use it in a program. The deffun statement provides the compiler with information such as the function name, and the number and type of arguments. In a program, each user-written function must have a unique definition. Any subsequent deffun statement for a user-written function that is already defined causes a fatal error.",
                "detail": "DEFFUN $name($args)",
                "snippet": "DEFFUN ${1:name}(${2:args})"
            },
            {
                "key": "Del",
                "icon": 14,
                "documentation": "The del statement provides an alternate to the delete() function for deleting a location from a dynamic array.",
                "detail": "DEL $variable",
                "snippet": "DEL ${1:variable}"
            },
            {
                "key": "Delete",
                "icon": 3,
                "documentation": "The delete statement removes a specific item from a file.",
                "detail": "DELETE $filevar,$recordkey",
                "snippet": "DELETE ${1:filevar},${2:recordkey}"
            },
            {
                "key": "DeleteFunc",
                "icon": 14,
                "documentation": "The delete statement removes a specific item from a file.",
                "detail": "DELETE($dynarr, $attr, $val, $subval)",
                "snippet": "DELETE(${1:dynarr}, ${2:attr}, ${3:val}, ${4:subval})"
            },
            {
                "key": "Dimension",
                "icon": 14,
                "documentation": "The dimension statement establishes a specific number of storage locations for a matrix of variables.",
                "detail": "DIM $variable($numbers)",
                "snippet": "DIM ${1:variable}(${2:numbers})"
            },
            {
                "key": "Display",
                "icon": 14,
                "documentation": "The crt statement outputs unconditionally to the terminal display, regardless of whether or not the printer on condition is in effect.",
                "detail": "DISPLAY $expr",
                "snippet": "DISPLAY ${1:expr}"
            },
            {
                "key": "Display @",
                "icon": 14,
                "documentation": "The crt statement outputs unconditionally to the terminal display, regardless of whether or not the printer on condition is in effect.",
                "detail": "DISPLAY @($col, $row):$expr",
                "snippet": "DISPLAY @(${1:col}, ${2:row}):${3:expr}"
            },
            {
                "key": "Dquote",
                "icon": 3,
                "documentation": "The dquote() function extracts a double-quoted string from str.exp.",
                "detail": "DQUOTE($expr)",
                "snippet": "DQUOTE(${1:expr})"
            },
            {
                "key": "Dtx",
                "icon": 3,
                "documentation": "The dtx() function converts a given decimal number to its corresponding hexadecimal equivalent. The number is first converted to an integer by truncating the fractional part.",
                "detail": "DTX($expr)",
                "snippet": "DTX(${1:expr})"
            },
            {
                "key": "Ebcdic",
                "icon": 3,
                "documentation": "The ebcdic() function converts a string of ASCII-encoded characters into their equivalent EBCDIC values.",
                "detail": "EBCDIC($expr)",
                "snippet": "EBCDIC(${1:expr})"
            },
            {
                "key": "Echo",
                "icon": 14,
                "documentation": "The echo statement toggles terminal echo on or off.",
                "detail": "ECHO $expr",
                "snippet": "ECHO ${1:expr}"
            },
            {
                "key": "Else",
                "icon": 14,
                "documentation": "If Else",
                "detail": "ELSE\n\t$1\nEND",
                "snippet": "ELSE\n\t$1\nEND"
            },
            {
                "key": "Enter",
                "icon": 14,
                "documentation": "The enter statement transfers control to another cataloged FlashBASIC or BASIC program.",
                "detail": "ENTER $progname",
                "snippet": "ENTER ${1:progname}"
            },
            {
                "key": "Equate",
                "icon": 14,
                "documentation": "The equate statement is a compiler directive that declares a constant at compile time or a synonym of another variable or array element.",
                "detail": "EQUATE $symbol TO $var",
                "snippet": "EQUATE ${1:symbol} TO ${2:var}"
            },
            {
                "key": "Equ",
                "icon": 14,
                "documentation": "The equate statement is a compiler directive that declares a constant at compile time or a synonym of another variable or array element.",
                "detail": "EQU $symbol TO $var",
                "snippet": "EQU ${1:symbol} TO ${2:var}"
            },
            {
                "key": "Ereplace",
                "icon": 3,
                "documentation": "The ereplace() function searches a string expression for the search string and then, if at the start occurrence, replaces search.str with replacement.str for the amount of occurrences specified in occurrences.",
                "detail": "EREPLACE($expr, $searchstr, $replacement, $occurrence, $begin)",
                "snippet": "EREPLACE(${1:expr}, ${2:searchstr}, ${3:replacement}, ${4:occurrence}, ${5:begin})"
            },
            {
                "key": "Error",
                "icon": 3,
                "documentation": "The error statement displays the error message from the messages file and continues execution of the program.",
                "detail": "ERROR $messagenum, $params",
                "snippet": "ERROR ${1:messagenum}, ${2:params}"
            },
            {
                "key": "ErrorFunc",
                "icon": 3,
                "documentation": "The error statement displays the error message from the messages file and continues execution of the program.",
                "detail": "ERROR()",
                "snippet": "ERROR()"
            },
            {
                "key": "Exchange",
                "icon": 3,
                "documentation": "The exchange() function replaces the characters specified in str.exp1 with the characters specified in str.exp2.",
                "detail": "EXCHANGE($var, $search, $replace)",
                "snippet": "EXCHANGE(${1:var}, ${2:search}, ${3:replace})"
            },
            {
                "key": "Execute",
                "icon": 14,
                "documentation": "The execute statement temporarily pushes a level and performs any valid TCL expression, then continues execution of the FlashBASIC or BASIC program.",
                "detail": "EXECUTE $expr",
                "snippet": "EXECUTE ${1:expr}"
            },
            {
                "key": "ExecuteAll",
                "icon": 14,
                "documentation": "The execute statement temporarily pushes a level and performs any valid TCL expression, then continues execution of the FlashBASIC or BASIC program.",
                "detail": "EXECUTE $expr CAPTURING $var RETURNING $statusvar",
                "snippet": "EXECUTE ${1:expr} CAPTURING ${2:var} RETURNING ${3:statusvar}"
            },
            {
                "key": "Exit",
                "icon": 14,
                "documentation": "The exit statement forces an early exit from a loop that is under for...next or loop...repeat control.",
                "detail": "EXIT",
                "snippet": "EXIT"
            },
            {
                "key": "Exp",
                "icon": 3,
                "documentation": "The exp() function returns the exponential of a numeric expression, that is, base e, which is 2.718281828 rounded to precision to the power of the numeric expression.",
                "detail": "EXP($expr)",
                "snippet": "EXP(${1:expr})"
            },
            {
                "key": "Extract",
                "icon": 3,
                "documentation": "The extract() function retrieves a specific attribute, value, or subvalue from a dimensioned or dynamic array.",
                "detail": "EXTRACT($DynArr, $attr, $value, $subvalue)",
                "snippet": "EXTRACT(${1:DynArr}, ${2:attr}, ${3:value}, ${4:subvalue})"
            },
            {
                "key": "Field",
                "icon": 3,
                "documentation": "The field() function returns a substring from a string expression, by specifying a delimiter and the desired occurrence.",
                "detail": "FIELD($string, $delimiter, $occurrence, $extractCnt)",
                "snippet": "FIELD(${1:string}, ${2:delimiter}, ${3:occurrence}, ${4:extractCnt})"
            },
            {
                "key": "File",
                "icon": 14,
                "documentation": "The file statement is a compiler directive that allows the use of attribute definition items in the file\u2019s dictionary while compiling a program.",
                "detail": "FILE $name",
                "snippet": "FILE ${1:name}"
            },
            {
                "key": "Filelock",
                "icon": 14,
                "documentation": "The filelock statement sets an exclusive lock on an entire file.",
                "detail": "FILELOCK filevar LOCKED $lock_statements ",
                "snippet": "FILELOCK filevar LOCKED ${1:lock_statements} "
            },
            {
                "key": "Fileunlock",
                "icon": 14,
                "documentation": "The fileunlock statement releases an exclusive lock set by the filelock statement on an entire file.",
                "detail": "FILEUNLOCK $file_variable",
                "snippet": "FILEUNLOCK ${1:file_variable}"
            },
            {
                "key": "Fmt",
                "icon": 3,
                "documentation": "The fmt() function is identical to performing a FlashBASIC or BASIC mask.",
                "detail": "FMT($str, $mask)",
                "snippet": "FMT(${1:str}, ${2:mask})"
            },
            {
                "key": "Fold",
                "icon": 3,
                "documentation": "The fold() function folds a string expression into a string of a given length.",
                "detail": "FOLD($str, $foldlen, $delim)",
                "snippet": "FOLD(${1:str}, ${2:foldlen}, ${3:delim})"
            },
            {
                "key": "Footing",
                "icon": 14,
                "documentation": "The footing statement designates a text string composed of literals and special options to output at the bottom of each page.",
                "detail": "FOOTING $str",
                "snippet": "FOOTING ${1:str}"
            },
            {
                "key": "For",
                "icon": 14,
                "documentation": "The for...next statement is an iterative, incremental loop statement used to repeat a sequence of statements for a specific number of occurrences.",
                "detail": "for var = num.exp1 to num.exp2{step num.exp3} {[while|until] logical.exp}\n\tstatement{s}\nnext var",
                "snippet": "FOR $1 = $2 TO $3\n\t$4\nNEXT $5"
            },
            {
                "key": "Function",
                "icon": 14,
                "documentation": "A user-defined function statement looks, compiles, and catalogs like a callable subroutine, except the RETURN statement becomes \"RETURN X\", where X is the value to return (return_value).",
                "detail": "FUNCTION $name($args)\n\t$statements\nRETURN $var",
                "snippet": "FUNCTION ${1:name}(${2:args})\n\t${3:statements}\nRETURN ${4:var}"
            },
            {
                "key": "Get",
                "icon": 14,
                "documentation": "The get statement gets raw characters from the specified port.",
                "detail": "GET $Var,$length SETTING $charcnt FROM $port UNTIL $termchar RETURNING $retTermChar WAITING $seconds THEN\n\t$then_statements\nEND ELSE\n\t$else_statements\nEND",
                "snippet": "GET ${1:Var},${2:length} SETTING ${3:charcnt} FROM ${4:port} UNTIL ${5:termchar} RETURNING ${6:retTermChar} WAITING ${7:seconds} THEN\n\t${8:then_statements}\nEND ELSE\n\t${9:else_statements}\nEND"
            },
            {
                "key": "Getx",
                "icon": 14,
                "documentation": "The getx statement receives input from an attached line in ASCII hexadecimal format. The statement returns an exploded ASCII hexadecimal string that allows binary data to contain a decimal 255 (x\u2019ff\u2019)",
                "detail": "GETX $var,$length SETTING $charcnt FROM $portexp UNTIL $termchar RETURNING $retTermChar WAITING $seconds THEN\n\t$then_statements\nEND ELSE\n\t$else_statements\nEND",
                "snippet": "GETX ${1:var},${2:length} SETTING ${3:charcnt} FROM ${4:portexp} UNTIL ${5:termchar} RETURNING ${6:retTermChar} WAITING ${7:seconds} THEN\n\t${8:then_statements}\nEND ELSE\n\t${9:else_statements}\nEND"
            },
            {
                "key": "Gosub",
                "icon": 14,
                "documentation": "The gosub statement transfers control to a local subroutine identified by a statement label within the program. Control returns to the next statement after the gosub statement when the return statement is encountered.",
                "detail": "GOSUB $label",
                "snippet": "GOSUB ${1:label}"
            },
            {
                "key": "Goto",
                "icon": 14,
                "documentation": "The goto statement transfers control to the location in the FlashBASIC or BASIC program that begins with the given statement label. On statement labels beginning with a nonnumeric value, the : following the statement.label is optional in the goto, but is required following the actual statement label.",
                "detail": "GOTO $label",
                "snippet": "GOTO ${1:label}"
            },
            {
                "key": "Heading",
                "icon": 14,
                "documentation": "The heading statement designates a text string composed of literals and special options to output at the top of each page.",
                "detail": "HEADING $expr",
                "snippet": "HEADING ${1:expr}"
            },
            {
                "key": "Iconv",
                "icon": 3,
                "documentation": "The iconv() function converts a value from its external format to its internal equivalent, according to the processing code being applied.",
                "detail": "ICONV($subject, $convcode)",
                "snippet": "ICONV(${1:subject}, ${2:convcode})"
            },
            {
                "key": "If",
                "icon": 14,
                "documentation": "The if statement tests the result of a logical expression. Depending on whether the expression evaluates to either true or false, the statements following the then or else clauses, respectively, are executed.",
                "detail": "if expression then statement else statement",
                "snippet": "IF $1 THEN\n\t$2\nEND"
            },
            {
                "key": "Ifr",
                "icon": 14,
                "documentation": "The ifr statement tests the result of a logical expression.",
                "detail": "IFR $1 THEN\n\t$2\nEND ELSE\n\t$3\nEND",
                "snippet": "IFR $1 THEN\n\t$2\nEND ELSE\n\t$3\nEND"
            },
            {
                "key": "In",
                "icon": 14,
                "documentation": "The in statement accepts a single raw character of input from the keyboard, without displaying a prompt character or requiring pressing ENTER following the input.",
                "detail": "IN $var THEN\n\t$then_statements\nEND ELSE\n\t$else_statements\nEND",
                "snippet": "IN ${1:var} THEN\n\t${2:then_statements}\nEND ELSE\n\t${3:else_statements}\nEND"
            },
            {
                "key": "Index",
                "icon": 3,
                "documentation": "The index() function searches through a given str.exp for the occurrence of the character or substring specified by substr.exp and if found, returns the numeric position where the nth occurrence of the substring begins. Null strings are skipped.",
                "detail": "INDEX($subject, $search, $occurrence)",
                "snippet": "INDEX(${1:subject}, ${2:search}, ${3:occurrence})"
            },
            {
                "key": "Inmat",
                "icon": 3,
                "documentation": "The inmat() function returns information about arrays.",
                "detail": "INMAT($array)",
                "snippet": "INMAT(${1:array})"
            },
            {
                "key": "Input",
                "icon": 14,
                "documentation": "The input statement temporarily suspends execution of the program until a response is provided from the keyboard and assigns that response to a specified variable.",
                "detail": "INPUT $var",
                "snippet": "INPUT ${1:var}"
            },
            {
                "key": "Input@",
                "icon": 14,
                "documentation": "The input statement temporarily suspends execution of the program until a response is provided from the keyboard and assigns that response to a specified variable.",
                "detail": "INPUT @($col, $row):$var",
                "snippet": "INPUT @(${1:col}, ${2:row}):${3:var}"
            },
            {
                "key": "Inputclear",
                "icon": 14,
                "documentation": "The inputclear statement clears the keyboard type-ahead buffer.",
                "detail": "INPUTCLEAR",
                "snippet": "INPUTCLEAR"
            },
            {
                "key": "Inputctrl",
                "icon": 14,
                "documentation": "The inputctrl statement toggles on and off the ability to enter control characters on succeeding BASIC input statements.",
                "detail": "INPUTCTRL $expr",
                "snippet": "INPUTCTRL ${1:expr}"
            },
            {
                "key": "Inputerr",
                "icon": 14,
                "documentation": "The inputerr statement displays a message on the status (bottom) line of the terminal. it meant to be used with the input@ statement.",
                "detail": "INPUTERR $str",
                "snippet": "INPUTERR ${1:str}"
            },
            {
                "key": "Inputif",
                "icon": 14,
                "documentation": "The inputif statement captures input from the type-ahead buffer and assigns the input to a variable.",
                "detail": "inputif var {= expr} {,length-expr} {,fillchars} {_} {:} {from line-expr}\nthen\/else statement\nend",
                "snippet": "inputif ${1:var} then ${2:statements}"
            },
            {
                "key": "Inputnull",
                "icon": 14,
                "documentation": "The inputnull statement is used with the input @ statement to define the character used to indicate a null input on subsequent input statements.",
                "detail": "INPUTNULL $char",
                "snippet": "INPUTNULL ${1:char}"
            },
            {
                "key": "Inputparity",
                "icon": 14,
                "documentation": "The inputparity statement enables or disables the extended character set (xcs) for the current process.",
                "detail": "INPUTPARITY $ON_OFF",
                "snippet": "INPUTPARITY ${1:ON_OFF}"
            },
            {
                "key": "Inputtrap Off",
                "icon": 14,
                "documentation": "The inputtrap off statement cancels the previous inputtrap statement.",
                "detail": "INPUTTRAP OFF",
                "snippet": "INPUTTRAP OFF"
            },
            {
                "key": "Inputtrap gosub",
                "icon": 14,
                "documentation": "The inputtrap...gosub statement, using the str.exp, sets up an automatic computed gosub based on the next input @ statement data. The position of the character in the string expression corresponds to the position of the statement label in the list. This acts as a trap that causes a gosub on all subsequent input @ statements.",
                "detail": "inputtrap str.exp gosub statement.label{,statement.label...}",
                "snippet": "INPUTTRAP ${1:str} GOSUB ${2:statementlabel}"
            },
            {
                "key": "Inputtrap goto",
                "icon": 14,
                "documentation": "The inputtrap...goto statement, using the str.exp, sets up an automatic computed goto based on the next input @ statement\u2019s data. The position of each character in the string expression corresponds to the position of the statement label in the list. This acts as a trap that causes a goto on all subsequent input @ statements and branches to a label in the current program.",
                "detail": "inputtrap str.exp goto statement.label{,statement.label{,...}}",
                "snippet": "INPUTTRAP ${1:str} GOTO ${2:statementlabel}"
            },
            {
                "key": "Ins",
                "icon": 14,
                "documentation": "The ins statement is an alternative to the insert() function for inserting a string expression into a dynamic array.",
                "detail": "INS $expr BEFORE $Var<$attr, $value, $subvalue>",
                "snippet": "INS ${1:expr} BEFORE ${2:Var}<${3:attr}, ${4:value}, ${5:subvalue}>"
            },
            {
                "key": "Insert",
                "icon": 3,
                "documentation": "The insert() function inserts the element referenced by str.exp into a specific attribute, value, or subvalue location in dyn.array.exp.",
                "detail": "INSERT($DynArr, $attr, $value, $subvalue; $expr)",
                "snippet": "INSERT(${1:DynArr}, ${2:attr}, ${3:value}, ${4:subvalue}; ${5:expr})"
            },
            {
                "key": "Int",
                "icon": 3,
                "documentation": "The int() function returns the numeric integer equivalent from a given expression.",
                "detail": "INT($expr)",
                "snippet": "INT(${1:expr})"
            },
            {
                "key": "Key",
                "icon": 14,
                "documentation": "The key statement locates an item using a B-tree index key, and returns the item in a variable, providing the ability to sequentially search the items in the file based on the index.",
                "detail": "KEY($operator, $rootvar, $indexkey, $itemid, $vcexp) THEN\n\t$then_statements\nEND ELSE\n\t$else_statements\nEND",
                "snippet": "KEY(${1:operator}, ${2:rootvar}, ${3:indexkey}, ${4:itemid}, ${5:vcexp}) THEN\n\t${6:then_statements}\nEND ELSE\n\t${7:else_statements}\nEND"
            },
            {
                "key": "Len",
                "icon": 3,
                "documentation": "The len() function returns the length of a string expression.",
                "detail": "LEN($str)",
                "snippet": "LEN(${1:str})"
            },
            {
                "key": "Let",
                "icon": 14,
                "documentation": "The let statement assigns the value of an expression to a variable.",
                "detail": "LET $var = $expr",
                "snippet": "LET ${1:var} = ${2:expr}"
            },
            {
                "key": "Ln",
                "icon": 3,
                "documentation": "The ln() function returns the natural logarithm (base e, which is 2.718281828 rounded to precision) of a given numeric expression.",
                "detail": "LN($expr)",
                "snippet": "LN(${1:expr})"
            },
            {
                "key": "Locate",
                "icon": 3,
                "documentation": "The locate statement searches for the location of a specific string expression and returns the location in position.var.",
                "detail": "LOCATE $search IN $subject SETTING $pos THEN\n\t$then_statements\nEND ELSE\n\t$else_statements\nEND",
                "snippet": "LOCATE ${1:search} IN ${2:subject} SETTING ${3:pos} THEN\n\t${4:then_statements}\nEND ELSE\n\t${5:else_statements}\nEND"
            },
            {
                "key": "LocateFunc",
                "icon": 14,
                "documentation": "The locate statement searches for the location of a specific string expression and returns the location in position.var.",
                "detail": "LOCATE($str, $dynarr, $attr, $value; $returnVar) THEN\t$then_statementsEND ELSE\t$else_statementsEND",
                "snippet": "LOCATE(${1:str}, ${2:dynarr}, ${3:attr}, ${4:value}; ${5:returnVar}) THEN\t${6:then_statementsEND} ELSE\t${7:else_statementsEND}"
            },
            {
                "key": "Lock",
                "icon": 14,
                "documentation": "The lock statement sets one of 992 execution locks, in the range from 0 through 63. This prevents re-entry to the program, allowing only one process to run the program at any given time.",
                "detail": "LOCK $expr THEN\n\t$then_statements\nEND ELSE\n\t$else_statements\nEND",
                "snippet": "LOCK ${1:expr} THEN\n\t${2:then_statements}\nEND ELSE\n\t${3:else_statements}\nEND"
            },
            {
                "key": "Loop Until",
                "icon": 14,
                "documentation": "The loop statement repetitively executes (loops) until an ending condition is met. The first set of statements, if present, is executed at least once.",
                "detail": "loop {statement.block1} [until|while] logical.exp{do} {statement.block2} repeat\nloop\n\t{statement.block1}\n[until|while] logical.exp{do}\n\t{statement.block2}\nrepeat\nloop {statement.block} repeat",
                "snippet": "LOOP \n\t${1:statement}\nUNTIL ${2:expr} DO\n\t${3:statement2}\nREPEAT"
            },
            {
                "key": "Loop While",
                "icon": 14,
                "documentation": "The loop statement repetitively executes (loops) until an ending condition is met. The first set of statements, if present, is executed at least once.",
                "detail": "loop {statement.block1} [until|while] logical.exp{do} {statement.block2} repeat\nloop\n\t{statement.block1}\n[until|while] logical.exp{do}\n\t{statement.block2}\nrepeat\nloop {statement.block} repeat",
                "snippet": "LOOP \n\t${1:statement}\nWHILE ${2:expr} DO\n\t${3:statement2}\nREPEAT"
            },
            {
                "key": "Mat",
                "icon": 14,
                "documentation": "The mat statement assigns data to each element of a dimensioned array variable to a specific value in one operation.",
                "detail": "MAT $array = $expr",
                "snippet": "MAT ${1:array} = ${2:expr}"
            },
            {
                "key": "Matbuild",
                "icon": 14,
                "documentation": "The matbuild statement converts a dimensioned array into a dynamic array.",
                "detail": "MATBUILD $variable FROM $array, $startexpr, $endexpr",
                "snippet": "MATBUILD ${1:variable} FROM ${2:array}, ${3:startexpr}, ${4:endexpr}"
            },
            {
                "key": "Matparse",
                "icon": 14,
                "documentation": "The matparse statement converts a dynamic array into a dimensioned array.",
                "detail": "MATPARSE $mat FROM $str SETTING $var",
                "snippet": "MATPARSE ${1:mat} FROM ${2:str} SETTING ${3:var}"
            },
            {
                "key": "Matread",
                "icon": 14,
                "documentation": "The matread statement reads the specified item from the optionally specified file.var, or if not specified, the default file.var, and stores one attribute per element in the dimensioned array.",
                "detail": "MATREAD $mat FROM $filevar, $recordkey THEN\n\t$then_statements\nEND ELSE\n\t$else_statements\nEND",
                "snippet": "MATREAD ${1:mat} FROM ${2:filevar}, ${3:recordkey} THEN\n\t${4:then_statements}\nEND ELSE\n\t${5:else_statements}\nEND"
            },
            {
                "key": "Matreadu",
                "icon": 14,
                "documentation": "The matreadu form of the matread statement tests if an item is already locked and locks the item if it is not. The item lock set by matreadu prevents the item from being read using the matreadu statement or updated by other processes while the lock is set.",
                "detail": "MATREADU $mat FROM $filevar, $recordkey THEN\n\t$then_statements\nEND ELSE\n\t$else_statements\nEND",
                "snippet": "MATREADU ${1:mat} FROM ${2:filevar}, ${3:recordkey} THEN\n\t${4:then_statements}\nEND ELSE\n\t${5:else_statements}\nEND"
            },
            {
                "key": "Matwrite",
                "icon": 14,
                "documentation": "The matwrite statement writes an item into the specified file.var.",
                "detail": "MATWRITE $mat ON $filevar, $recordkey",
                "snippet": "MATWRITE ${1:mat} ON ${2:filevar}, ${3:recordkey}"
            },
            {
                "key": "Matwriteu",
                "icon": 14,
                "documentation": "The matwriteu statement is identical to the matwrite statement, except the item remains locked. The matwriteu form keeps the item locked if it was previously locked by a readu, readvu, or matwriteu statement within the same program.",
                "detail": "MATWRITEU $mat ON $filevar, $recordkey",
                "snippet": "MATWRITEU ${1:mat} ON ${2:filevar}, ${3:recordkey}"
            },
            {
                "key": "Maximum",
                "icon": 3,
                "documentation": "The maximum() function returns the maximum of a list of numbers delimited by attribute, value, or subvalue marks. If different orders of marks are present, the maximum() function returns the maximum of all fields, regardless of delimiter.",
                "detail": "MAXIMUM($str)",
                "snippet": "MAXIMUM(${1:str})"
            },
            {
                "key": "Minimum",
                "icon": 3,
                "documentation": "The minimum() function returns the minimum of a list of numbers delimited by attribute, value, or subvalue marks. If different orders of marks are present, the minimum() function returns the minimum of all fields, regardless of delimiter.",
                "detail": "MINIMUM($str)",
                "snippet": "MINIMUM(${1:str})"
            },
            {
                "key": "Mod",
                "icon": 3,
                "documentation": "The mod() function returns the remainder portion of the result of dividing one number by another.",
                "detail": "MOD($dividend, $divisor)",
                "snippet": "MOD(${1:dividend}, ${2:divisor})"
            },
            {
                "key": "Next",
                "icon": 14,
                "documentation": "The next statement occurs at the end of a for...next construct and causes the iteration counter to increment and branches to the corresponding for statement to decide whether to terminate.",
                "detail": "NEXT var",
                "snippet": "NEXT ${1:var}"
            },
            {
                "key": "Not",
                "icon": 3,
                "documentation": "The not() function returns the logical inverse of the normal outcome of true and false generated by a logical expression.",
                "detail": "NOT($expr)",
                "snippet": "NOT(${1:expr})"
            },
            {
                "key": "Null",
                "icon": 14,
                "documentation": "The null statement performs no operation, other than to provide an instruction where one is required. This is usually used for program readability.",
                "detail": "NULL",
                "snippet": "NULL"
            },
            {
                "key": "Num",
                "icon": 3,
                "documentation": "The num() function evaluates an expression and returns 1 (true) if it is a decimal numeric. Otherwise, it returns 0, if the expression contains any nonnumeric characters.",
                "detail": "NUM($str)",
                "snippet": "NUM(${1:str})"
            },
            {
                "key": "Nxtkey",
                "icon": 14,
                "documentation": "The nxtkey statement scans forward through a key file along a key path.",
                "detail": "NXTKEY result FROM filevar,a.code,key,n THEN\/ELSE",
                "snippet": "NXTKEY ${1:result} FROM ${2:filevar}, ${3:acode}, ${4:key}, ${5:n} THEN ${6:statements}"
            },
            {
                "key": "Occurs",
                "icon": 3,
                "documentation": "The occurs() function searches a string for attributes or values that occur consecutively.",
                "detail": "OCCURS($str, $num)",
                "snippet": "OCCURS(${1:str}, ${2:num})"
            },
            {
                "key": "Oconv",
                "icon": 3,
                "documentation": "The oconv() function converts a value from its internal format to its external equivalent, according to the processing code being applied.",
                "detail": "OCONV($subject, $conversion)",
                "snippet": "OCONV(${1:subject}, ${2:conversion})"
            },
            {
                "key": "On...gosub",
                "icon": 14,
                "documentation": "The on... gosub statement transfers control to a local subroutine designated by a specific statement label according to the positional value returned by the expression. The syntax can also be specified as on...go sub...(allowing a space between go and sub).",
                "detail": "on exp gosub statement.label{,statement.label...}",
                "snippet": "on ${1:exp} gosub ${2:label}"
            },
            {
                "key": "On...goto",
                "icon": 14,
                "documentation": "The on...goto statement transfers control to the line within the FlashBASIC or BASIC program that begins with the specified statement label, according to the positional value of the expression referenced by exp. The syntax can also be specified as on...go to...(allowing a space between go and to).",
                "detail": "on exp goto statement.label{,statement.label...}",
                "snippet": "on ${1:exp} goto ${2:label}"
            },
            {
                "key": "Open",
                "icon": 14,
                "documentation": "The open statement opens a specified file name and associates the file with the optional file.var.",
                "detail": "OPEN $filename TO $filevar ELSE $else_statements",
                "snippet": "OPEN ${1:filename} TO ${2:filevar} ELSE ${3:else_statements}"
            },
            {
                "key": "Out",
                "icon": 14,
                "documentation": "The out statement outputs a single ASCII character derived from a numeric expression in the range of 0 through 255, which indicates its corresponding position in the ASCII table.",
                "detail": "OUT $num",
                "snippet": "OUT ${1:num}"
            },
            {
                "key": "Page",
                "icon": 14,
                "documentation": "The page statement terminates the current page of output, prints the optional footing, positions to the top of the form, and prints the optional heading.",
                "detail": "PAGE $1",
                "snippet": "PAGE $1"
            },
            {
                "key": "Precision",
                "icon": 14,
                "documentation": "The precision statement defines the number of fractional decimal places that a numerical value can hold.",
                "detail": "PRECISION $int",
                "snippet": "PRECISION ${1:int}"
            },
            {
                "key": "Print",
                "icon": 14,
                "documentation": "The print statement directs output of an expression to the current output device.",
                "detail": "PRINT $expr",
                "snippet": "PRINT ${1:expr}"
            },
            {
                "key": "Print on",
                "icon": 14,
                "documentation": "The print on statement directs output to one of 32,767 open print files.",
                "detail": "print on print.file.num print.exp",
                "snippet": "print on"
            },
            {
                "key": "Printchar",
                "icon": 14,
                "documentation": "The printchar statement prints the first character of the string expression to the screen or to the printer.",
                "detail": "PRINTCHAR $str",
                "snippet": "PRINTCHAR ${1:str}"
            },
            {
                "key": "Printer",
                "icon": 14,
                "documentation": "The printer statement controls the output from subsequent print, heading, footing, or page statements.",
                "detail": "PRINTER $ON_OFF_CLOSE",
                "snippet": "PRINTER ${1:ON_OFF_CLOSE}"
            },
            {
                "key": "Printerr",
                "icon": 14,
                "documentation": "The printerr statement allows BASIC programs to produce output messages using the Error Message Processor and the errmsg file.",
                "detail": "printerr errmsg.id [, param1 [, param2 [, ...]]]",
                "snippet": "printerr ${1:errmsg}"
            },
            {
                "key": "Procread",
                "icon": 14,
                "documentation": "The procread statement reads the calling Proc\u2019s primary input buffer and assigns its contents to a specified variable.",
                "detail": "PROCREAD $variable THEN\n\t$then_statements\nEND ELSE\n\t$else_statements\nEND",
                "snippet": "PROCREAD ${1:variable} THEN\n\t${2:then_statements}\nEND ELSE\n\t${3:else_statements}\nEND"
            },
            {
                "key": "Procwrite",
                "icon": 14,
                "documentation": "The procwrite statement writes a string expression variable to the calling Proc\u2019s primary input buffer.",
                "detail": "PROCWRITE $expr",
                "snippet": "PROCWRITE ${1:expr}"
            },
            {
                "key": "Program",
                "icon": 14,
                "documentation": "The program statement is optionally used on the first line of a program to indicate that this is a program.",
                "detail": "PROGRAM $progname",
                "snippet": "PROGRAM ${1:progname}"
            },
            {
                "key": "Prompt",
                "icon": 14,
                "documentation": "The prompt statement indicates the single character to display during subsequent input statements that prompt for input from the keyboard.",
                "detail": "PROMPT $expr",
                "snippet": "PROMPT ${1:expr}"
            },
            {
                "key": "Prvkey",
                "icon": 14,
                "documentation": "The prvkey statement operates in the same manner as the nxtkey statement with the exception that the keys returned are those previous to the beginning key value key.",
                "detail": "PRVKEY result FROM filevar,a.code,key,n THEN\/ELSE",
                "snippet": "PRVKEY ${1:result} FROM ${2:filevar}, ${3:acode}, ${4:key}, ${5:n} THEN ${6:statement}"
            },
            {
                "key": "Pwr",
                "icon": 3,
                "documentation": "The pwr() function raises a value contained in an expression to the power of the value of a second expression.",
                "detail": "PWR($expression1, $pwrexpr)",
                "snippet": "PWR(${1:expression1}, ${2:pwrexpr})"
            },
            {
                "key": "Read",
                "icon": 14,
                "documentation": "The read statement reads an item as a dynamic array and stores the item as a string. Each attribute is automatically an element of the dynamic array variable and can be referenced with the appropriate intrinsic functions.",
                "detail": "READ $var FROM $filevar,$recordkey THEN\n\t$then_statements\nEND ELSE\n\t$else_statements\nEND",
                "snippet": "READ ${1:var} FROM ${2:filevar},${3:recordkey} THEN\n\t${4:then_statements}\nEND ELSE\n\t${5:else_statements}\nEND"
            },
            {
                "key": "Readnext",
                "icon": 14,
                "documentation": "The readnext statement retrieves the next item-ID from an active list and assigns it to a specified variable.",
                "detail": "READNEXT $var FROM $list",
                "snippet": "READNEXT ${1:var} FROM ${2:list}"
            },
            {
                "key": "Readt",
                "icon": 14,
                "documentation": "The readt statement reads a tape record and assigns the value returned to a specified variable.",
                "detail": "READT $var onerr $err_statements THEN\n\t$then_statements\nEND ELSE\n\t$else_statements\nEND",
                "snippet": "READT ${1:var} onerr ${2:err_statements} THEN\n\t${3:then_statements}\nEND ELSE\n\t${4:else_statements}\nEND"
            },
            {
                "key": "Readtx",
                "icon": 14,
                "documentation": "The readtx statement reads a tape record converts the tape record to hexadecimal and assigns the resulting hexadecimal value to a specified variable.",
                "detail": "READTX $var onerr $err_statement THEN\n\t$then_statements\nEND ELSE\n\t$else_statements\nEND",
                "snippet": "READTX ${1:var} onerr ${2:err_statement} THEN\n\t${3:then_statements}\nEND ELSE\n\t${4:else_statements}\nEND"
            },
            {
                "key": "Readu",
                "icon": 14,
                "documentation": "The readu statement reads an item as a dynamic array, locks it, and stores the item as a string. Each attribute is automatically an element of the dynamic array variable and can be referenced with the appropriate intrinsic functions.",
                "detail": "READU $var FROM $filevar,$recordkey THEN\n\t$then_statements\nEND ELSE\n\t$else_statements\nEND",
                "snippet": "READU ${1:var} FROM ${2:filevar},${3:recordkey} THEN\n\t${4:then_statements}\nEND ELSE\n\t${5:else_statements}\nEND"
            },
            {
                "key": "Readv",
                "icon": 14,
                "documentation": "The readv statement reads an item from the optionally-specified file variable and assigns the value contained in the attribute number referenced in the attribute expression to the specified variable.",
                "detail": "READV $var FROM $filevar,$recordkey,$attr THEN\n\t$then_statements\nEND ELSE\n\t$else_statements\nEND",
                "snippet": "READV ${1:var} FROM ${2:filevar},${3:recordkey},${4:attr} THEN\n\t${5:then_statements}\nEND ELSE\n\t${6:else_statements}\nEND"
            },
            {
                "key": "Readvu",
                "icon": 14,
                "documentation": "The readvu statement reads an item from the optionally-specified file variable, locks it, and assigns the value contained in the attribute number referenced in the attribute expression to the specified variable.",
                "detail": "READVU $var FROM $filevar,$recordkey,$attr THEN\n\t$then_statements\nEND ELSE\n\t$else_statements\nEND",
                "snippet": "READVU ${1:var} FROM ${2:filevar},${3:recordkey},${4:attr} THEN\n\t${5:then_statements}\nEND ELSE\n\t${6:else_statements}\nEND"
            },
            {
                "key": "Release",
                "icon": 14,
                "documentation": "The release statement clears locks on items locked with a previous matreadu, readu, or readvu statement.",
                "detail": "RELEASE $filevar, $expr ON ERROR $err_statements",
                "snippet": "RELEASE ${1:filevar}, ${2:expr} ON ERROR ${3:err_statements}"
            },
            {
                "key": "Rem",
                "icon": 14,
                "documentation": "The rem() function returns the remainder portion of the result of dividing one number by another.",
                "detail": "REM($dividend, $divisor)",
                "snippet": "REM(${1:dividend}, ${2:divisor})"
            },
            {
                "key": "Remove",
                "icon": 14,
                "documentation": "The remove statement retrieves a substring delimited by a system delimiter from a dynamic array.",
                "detail": "remove var from dyn.array at position.var setting delimiter.var",
                "snippet": "REMOVE ${1:str} FROM ${2:array} AT ${3:pos} SETTING ${4:setvar}"
            },
            {
                "key": "Repeat",
                "icon": 14,
                "documentation": "The repeat statement defines the end of a loop. See loop statement for more information.",
                "detail": "REPEAT",
                "snippet": "REPEAT"
            },
            {
                "key": "Replace",
                "icon": 3,
                "documentation": "The replace statement maintains referential integrity between items that contain bidirectional bridges used by the Update processor by eliminating duplicate item-IDs.",
                "detail": "replace file.var, item-ID.old with item-ID.new",
                "snippet": "REPLACE ${1:filevar}, ${2:itemid_old} WITH ${3:itemid_new}"
            },
            {
                "key": "ReplaceFunc",
                "icon": 3,
                "documentation": "The replace() function inserts or replaces a specific attribute, value, or subvalue in the string referenced by dyn.array.exp with the value referenced in str.exp.",
                "detail": "REPLACE($dynarr, $attr, $value, $subvalue; $replace)",
                "snippet": "REPLACE(${1:dynarr}, ${2:attr}, ${3:value}, ${4:subvalue}; ${5:replace})"
            },
            {
                "key": "Return",
                "icon": 14,
                "documentation": "The return statement terminates an internal or external subroutine and returns execution control to the statement following the invoking call or gosub statement.",
                "detail": "RETURN $1",
                "snippet": "RETURN $1"
            },
            {
                "key": "Rewind",
                "icon": 14,
                "documentation": "The rewind statement rewinds the currently attached magnetic tape unit to the beginning of the tape.",
                "detail": "REWIND onerr $err_statements THEN\n\t$then_statements\nEND ELSE\n\t$else_statements\nEND",
                "snippet": "REWIND onerr ${1:err_statements} THEN\n\t${2:then_statements}\nEND ELSE\n\t${3:else_statements}\nEND"
            },
            {
                "key": "Rnd",
                "icon": 3,
                "documentation": "The rnd() function generates a random number.",
                "detail": "RND($expr)",
                "snippet": "RND(${1:expr})"
            },
            {
                "key": "Rollback Work",
                "icon": 14,
                "documentation": "The rollback work statement rolls back (or undoes) a transaction.",
                "detail": "ROLLBACK WORK THEN\n\t$then_statements\nEND ELSE\n\t$else_statements\nEND",
                "snippet": "ROLLBACK WORK THEN\n\t${1:then_statements}\nEND ELSE\n\t${2:else_statements}\nEND"
            },
            {
                "key": "Root",
                "icon": 14,
                "documentation": "The root statement provides an interface to the B-tree indexes for subsequent references with the key statement.",
                "detail": "ROOT $fileref, $acode TO $rootvar THEN\n\t$then_statements\nEND ELSE\n\t$else_statements\nEND",
                "snippet": "ROOT ${1:fileref}, ${2:acode} TO ${3:rootvar} THEN\n\t${4:then_statements}\nEND ELSE\n\t${5:else_statements}\nEND"
            },
            {
                "key": "Rqm",
                "icon": 14,
                "documentation": "The rqm statement suspends processing for a specific number of seconds, or until a specific time.",
                "detail": "RQM $seconds",
                "snippet": "RQM ${1:seconds}"
            },
            {
                "key": "Scan",
                "icon": 3,
                "documentation": "The scan() function searches through a specified str.exp for the first occurrence of up to three user-definable characters specified by search.delimiters in addition to the system delimiters value, subvalue, and attribute.",
                "detail": "SCAN($str, $searchdelims)",
                "snippet": "SCAN(${1:str}, ${2:searchdelims})"
            },
            {
                "key": "Select",
                "icon": 14,
                "documentation": "The select statement creates an active list of item-IDs, allowing sequential access to each item in the file by use of the readnext statement.",
                "detail": "SELECT $variable1 TO $list",
                "snippet": "SELECT ${1:variable1} TO ${2:list}"
            },
            {
                "key": "Send",
                "icon": 14,
                "documentation": "The send statement sends output to a specified port.",
                "detail": "SEND $str TO $port THEN\n\t$then_statements\nEND ELSE\n\t$else_statements\nEND",
                "snippet": "SEND ${1:str} TO ${2:port} THEN\n\t${3:then_statements}\nEND ELSE\n\t${4:else_statements}\nEND"
            },
            {
                "key": "Sendx",
                "icon": 14,
                "documentation": "The sendx statement converts the exploded ASCII hexadecimal string results of str.exp to its binary equivalent and then transmits it to the specified port. The conversion process terminates when the first nonhexadecimal character is encountered. sendx suppresses the output of a CR\/LF pair. sendx does not allow the : to exist as part of the statement.",
                "detail": "SENDX $str TO $portnum THEN\n\t$then_statements\nEND ELSE\n\t$else_statements\nEND",
                "snippet": "SENDX ${1:str} TO ${2:portnum} THEN\n\t${3:then_statements}\nEND ELSE\n\t${4:else_statements}\nEND"
            },
            {
                "key": "Sentence",
                "icon": 3,
                "documentation": "The sentence() function is identical to performing a tclread statement. It returns the TCL command used to activate the program into a variable.",
                "detail": "SENTENCE()",
                "snippet": "SENTENCE()"
            },
            {
                "key": "Seq",
                "icon": 3,
                "documentation": "The seq() function converts any ASCII character to its corresponding numeric equivalent in the range 0 through 255.",
                "detail": "SEQ($char)",
                "snippet": "SEQ(${1:char})"
            },
            {
                "key": "Sin",
                "icon": 3,
                "documentation": "The sin() function calculates the sine of an angle specified in degrees.",
                "detail": "SIN($expr)",
                "snippet": "SIN(${1:expr})"
            },
            {
                "key": "Sleep",
                "icon": 14,
                "documentation": "The sleep statement places a process to sleep for a specific number of seconds, or, until a specific time.",
                "detail": "SLEEP $seconds",
                "snippet": "SLEEP ${1:seconds}"
            },
            {
                "key": "Sort",
                "icon": 3,
                "documentation": "The sort() function sorts an attribute or value mark delimited str.exp in ascending order.",
                "detail": "SORT($keycnt)",
                "snippet": "SORT(${1:keycnt})"
            },
            {
                "key": "Soundex",
                "icon": 3,
                "documentation": "The soundex() function returns the 4-digit soundex code for a phonetic string expression.",
                "detail": "SOUNDEX($str, $code)",
                "snippet": "SOUNDEX(${1:str}, ${2:code})"
            },
            {
                "key": "Space",
                "icon": 3,
                "documentation": "The space() function generates a string of spaces of a length equal to the value of the numeric expression.",
                "detail": "SPACE($cnt)",
                "snippet": "SPACE(${1:cnt})"
            },
            {
                "key": "Spoolq",
                "icon": 14,
                "documentation": "The spoolq statement enables or disables the spooler entry number message.",
                "detail": "SPOOLQ $1",
                "snippet": "SPOOLQ $1"
            },
            {
                "key": "Sqrt",
                "icon": 3,
                "documentation": "The sqrt() function calculates the square root of a given numeric expression.",
                "detail": "SQRT($expr)",
                "snippet": "SQRT(${1:expr})"
            },
            {
                "key": "Squote",
                "icon": 3,
                "documentation": "The squote() function extracts a single-quoted string from str.exp.",
                "detail": "SQUOTE($expr)",
                "snippet": "SQUOTE(${1:expr})"
            },
            {
                "key": "Status",
                "icon": 3,
                "documentation": "The status() function returns the value of system(0).",
                "detail": "status()",
                "snippet": "status()"
            },
            {
                "key": "Stop",
                "icon": 14,
                "documentation": "The stop statement stops program execution and returns to the invoking the process.",
                "detail": "STOP $1",
                "snippet": "STOP $1"
            },
            {
                "key": "Str",
                "icon": 3,
                "documentation": "The str() function repeats a str.exp the number of times specified in num.exp.",
                "detail": "STR($str, $cnt)",
                "snippet": "STR(${1:str}, ${2:cnt})"
            },
            {
                "key": "Subroutine",
                "icon": 14,
                "documentation": "The subroutine statement defines a program as an external subroutine.",
                "detail": "subroutine subroutine.name{(arg.list)}",
                "snippet": "SUBROUTINE ${1:name}(${2:args})\n$3\nRETURN"
            },
            {
                "key": "Sum",
                "icon": 3,
                "documentation": "The sum() function returns the sum of a list of numbers delimited by attribute, value, or subvalue marks. If different orders of marks are present, the sum() function computes the sum of each sublist.",
                "detail": "SUM($DynArr)",
                "snippet": "SUM(${1:DynArr})"
            },
            {
                "key": "Summation",
                "icon": 3,
                "documentation": "The summation() function returns the sum of a list of numbers delimited by attribute, value, or subvalue marks.",
                "detail": "SUMMATION($expr)",
                "snippet": "SUMMATION(${1:expr})"
            },
            {
                "key": "Swap",
                "icon": 3,
                "documentation": "The swap() function searches a string expression for the search string and then, if at the start occurrence, replaces search.str with replacement.str for the amount of occurrences specified in occurrences.",
                "detail": "SWAP($string, $old, $new, $occurrence, $start)",
                "snippet": "SWAP(${1:string}, ${2:old}, ${3:new}, ${4:occurrence}, ${5:start})"
            },
            {
                "key": "System",
                "icon": 3,
                "documentation": "The system() function provides an interface to a number of system variables",
                "detail": "SYSTEM($key)",
                "snippet": "SYSTEM(${1:key})"
            },
            {
                "key": "Ta",
                "icon": 3,
                "documentation": "The ta statement toggles or resets the type-ahead buffer.",
                "detail": "TA $1",
                "snippet": "TA $1"
            },
            {
                "key": "Tan",
                "icon": 3,
                "documentation": "The tan() function calculates the trigonometric tangent of the angle specified in degrees.",
                "detail": "TAN($expr)",
                "snippet": "TAN(${1:expr})"
            },
            {
                "key": "Tcl",
                "icon": 14,
                "documentation": "The tcl statement executes any valid TCL command as a subroutine.",
                "detail": "TCL $tclcmd",
                "snippet": "TCL ${1:tclcmd}"
            },
            {
                "key": "Tclread",
                "icon": 14,
                "documentation": "The tclread statement loads the TCL command used to activate the program into a variable.",
                "detail": "TCLREAD $var",
                "snippet": "TCLREAD ${1:var}"
            },
            {
                "key": "Time",
                "icon": 3,
                "documentation": "The time() function returns the current system time in its internal format, representing the number of seconds past midnight.",
                "detail": "TIME()",
                "snippet": "TIME()"
            },
            {
                "key": "Timedate",
                "icon": 3,
                "documentation": "The timedate() function returns the current system time and date in external format (hh:mm:ss dd mmm yyyy).",
                "detail": "TIMEDATE()",
                "snippet": "TIMEDATE()"
            },
            {
                "key": "Timeout",
                "icon": 14,
                "documentation": "mvBase Only: The timeout statement specifies the number of seconds the operating environment waits for terminal input before a timeout condition occurs.",
                "detail": "timeout exp",
                "snippet": "timeout ${1:exp}"
            },
            {
                "key": "Transaction",
                "icon": 14,
                "documentation": "The transaction statement enables or disables participation in a transaction.",
                "detail": "TRANSACTION $expr",
                "snippet": "TRANSACTION ${1:expr}"
            },
            {
                "key": "Transaction Abort",
                "icon": 14,
                "documentation": "transaction abort statement",
                "detail": "TRANSACTION ABORT",
                "snippet": "TRANSACTION ABORT"
            },
            {
                "key": "Transaction Cache",
                "icon": 14,
                "documentation": "The transaction cache statement enables or disables the transaction read cache.",
                "detail": "TRANSACTION CACHE $exp",
                "snippet": "TRANSACTION CACHE ${1:exp}"
            },
            {
                "key": "Transaction Commit",
                "icon": 14,
                "documentation": "transaction commit statement",
                "detail": "TRANSACTION COMMIT",
                "snippet": "TRANSACTION COMMIT"
            },
            {
                "key": "Transaction Flush",
                "icon": 14,
                "documentation": "The transaction flush statement enables or disables the transaction flush mechanism.",
                "detail": "TRANSACTION FLUSH $exp",
                "snippet": "TRANSACTION FLUSH ${1:exp}"
            },
            {
                "key": "Transaction Rollback",
                "icon": 3,
                "documentation": "transaction rollback function",
                "detail": "TRANSACTION ROLLBACK",
                "snippet": "TRANSACTION ROLLBACK"
            },
            {
                "key": "Transaction Start",
                "icon": 3,
                "documentation": "transaction start function",
                "detail": "TRANSACTION START",
                "snippet": "TRANSACTION START"
            },
            {
                "key": "Trim",
                "icon": 3,
                "documentation": "The trim() function removes leading, trailing, and\/or redundant characters from a string.",
                "detail": "TRIM($str, $char, $mode)",
                "snippet": "TRIM(${1:str}, ${2:char}, ${3:mode})"
            },
            {
                "key": "Trimb",
                "icon": 3,
                "documentation": "The trimb() function removes trailing spaces from a string.",
                "detail": "TRIMB($str)",
                "snippet": "TRIMB(${1:str})"
            },
            {
                "key": "Trimf",
                "icon": 3,
                "documentation": "The trimf() function removes leading spaces from a string.",
                "detail": "TRIMF($str)",
                "snippet": "TRIMF(${1:str})"
            },
            {
                "key": "Uclose",
                "icon": 14,
                "documentation": "The uclose command closes a file variable previously opened with the uopen command.",
                "detail": "UCLOSE $filehandle THEN\n\t$then_statements\nEND ELSE\n\t$else_statements\nEND",
                "snippet": "UCLOSE ${1:filehandle} THEN\n\t${2:then_statements}\nEND ELSE\n\t${3:else_statements}\nEND"
            },
            {
                "key": "Ucreate",
                "icon": 14,
                "documentation": "The ucreate command creates and opens a specified file on the host system.",
                "detail": "UCREATE $path TO $filehandle THEN\n\t$then_statements\nEND ELSE\n\t$else_statements\nEND",
                "snippet": "UCREATE ${1:path} TO ${2:filehandle} THEN\n\t${3:then_statements}\nEND ELSE\n\t${4:else_statements}\nEND"
            },
            {
                "key": "Udelete",
                "icon": 14,
                "documentation": "The udelete command removes the directory entry named by the path name.",
                "detail": "UDELETE $path THEN\n\t$then_statements\nEND ELSE\n\t$else_statements\nEND",
                "snippet": "UDELETE ${1:path} THEN\n\t${2:then_statements}\nEND ELSE\n\t${3:else_statements}\nEND"
            },
            {
                "key": "Uerror",
                "icon": 3,
                "documentation": "The uerror() function returns the error number that resulted from the previous inter-operating system command.",
                "detail": "UERROR()",
                "snippet": "UERROR()"
            },
            {
                "key": "Uexecute",
                "icon": 14,
                "documentation": "The uexecute command allows users to execute various Windows programs from within mvBASIC.",
                "detail": "UEXECUTE $cmd RETURNING $var",
                "snippet": "UEXECUTE ${1:cmd} RETURNING ${2:var}"
            },
            {
                "key": "Ulock",
                "icon": 14,
                "documentation": "The ulock command locks or unlocks a file specified by a file variable.",
                "detail": "ULOCK $filehandle $LOCK_UNLOCK FOR $n THEN\n\t$then_statements\nEND ELSE\n\t$else_statements\nEND",
                "snippet": "ULOCK ${1:filehandle} ${2:LOCK_UNLOCK} FOR ${3:n} THEN\n\t${4:then_statements}\nEND ELSE\n\t${5:else_statements}\nEND"
            },
            {
                "key": "Ulseek",
                "icon": 3,
                "documentation": "The ulseek() function moves the file pointer in an open file and returns the position of the file pointer, which is the number of bytes from the beginning of the file.",
                "detail": "ULSEEK($filehandle, $n, $pos)",
                "snippet": "ULSEEK(${1:filehandle}, ${2:n}, ${3:pos})"
            },
            {
                "key": "Umessage",
                "icon": 14,
                "documentation": "The umessage command sends a Windows-style message to the client linked to the process executing the command. If the optional TO clause is used, the umessage command sends a Windows application launched by the uexecute command.",
                "detail": "UMESSAGE TO $var, $exp1, $exp2, $exp3",
                "snippet": "UMESSAGE TO ${1:var}, ${2:exp1}, ${3:exp2}, ${4:exp3}"
            },
            {
                "key": "Unassigned",
                "icon": 3,
                "documentation": "The unassigned() function indicates whether a variable has an assigned value.",
                "detail": "unassigned(var)",
                "snippet": "unassigned(${1:var})"
            },
            {
                "key": "Unlock",
                "icon": 14,
                "documentation": "The unlock statement resets an execution lock, in the range 0 to 991, previously set with a lock statement.",
                "detail": "UNLOCK $locknum",
                "snippet": "UNLOCK ${1:locknum}"
            },
            {
                "key": "Uopen",
                "icon": 14,
                "documentation": "The uopen command opens a given file name to a file variable.",
                "detail": "UOPEN $path FOR $READWRITE_READ_WRITE TO $filehandle THEN\n\t$then_statements\nEND ELSE\n\t$else_statements\nEND",
                "snippet": "UOPEN ${1:path} FOR ${2:READWRITE_READ_WRITE} TO ${3:filehandle} THEN\n\t${4:then_statements}\nEND ELSE\n\t${5:else_statements}\nEND"
            },
            {
                "key": "Uread",
                "icon": 14,
                "documentation": "The uread command reads data from a previously opened file on the host system.",
                "detail": "UREAD $var FROM $filehandle FOR $n THEN\n\t$then_statements\nEND ELSE\n\t$else_statements\nEND",
                "snippet": "UREAD ${1:var} FROM ${2:filehandle} FOR ${3:n} THEN\n\t${4:then_statements}\nEND ELSE\n\t${5:else_statements}\nEND"
            },
            {
                "key": "Ureadline",
                "icon": 3,
                "documentation": "The ureadline() function reads data from a previously opened file on the host system.",
                "detail": "UREADLINE $var FROM $filehandle UNTIL $delim THEN\n\t$then_statements\nEND ELSE\n\t$else_statements\nEND",
                "snippet": "UREADLINE ${1:var} FROM ${2:filehandle} UNTIL ${3:delim} THEN\n\t${4:then_statements}\nEND ELSE\n\t${5:else_statements}\nEND"
            },
            {
                "key": "Usystem",
                "icon": 3,
                "documentation": "The usystem() function is used to obtain information from the underlying operating system environment.",
                "detail": "USYSTEM($1)",
                "snippet": "USYSTEM($1)"
            },
            {
                "key": "Uwaitfor",
                "icon": 14,
                "documentation": "The uwaitfor command causes the process to wait until the Windows application, identified by the var variable, terminates or the time specified by the expr1 variable elapses.",
                "detail": "UWAITFOR $var, $exp THEN\n\t$then_statements\nEND ELSE\n\t$else_statements\nEND",
                "snippet": "UWAITFOR ${1:var}, ${2:exp} THEN\n\t${3:then_statements}\nEND ELSE\n\t${4:else_statements}\nEND"
            },
            {
                "key": "Uwrite",
                "icon": 14,
                "documentation": "The uwrite command writes data to a previously opened file on the host system.",
                "detail": "UWRITE $var ON $filehandle THEN\n\t$then_statements\nEND ELSE\n\t$else_statements\nEND",
                "snippet": "UWRITE ${1:var} ON ${2:filehandle} THEN\n\t${3:then_statements}\nEND ELSE\n\t${4:else_statements}\nEND"
            },
            {
                "key": "Wakeup",
                "icon": 14,
                "documentation": "The wakeup statement is used for BASIC programs to wake up a different process that is either sleeping or waiting for input at an INPUT statement (which has an associated ELSE clause).",
                "detail": "WAKEUP process.no THEN\/ELSE ....",
                "snippet": "WAKEUP ${1:process_no} THEN ${2:statements}"
            },
            {
                "key": "Weof",
                "icon": 14,
                "documentation": "The weof statement writes an eof (end of file) mark to the currently attached magnetic media.",
                "detail": "WEOF $var THEN\n\t$then_statements\nEND ELSE\n\t$else_statements\nEND",
                "snippet": "WEOF ${1:var} THEN\n\t${2:then_statements}\nEND ELSE\n\t${3:else_statements}\nEND"
            },
            {
                "key": "Write",
                "icon": 14,
                "documentation": "The write statement writes the item specified in dyn.array.var into the specified file, using the item-ID specified in the ID.exp.",
                "detail": "WRITE $var TO $filevar,$recordkey",
                "snippet": "WRITE ${1:var} TO ${2:filevar},${3:recordkey}"
            },
            {
                "key": "Writet",
                "icon": 14,
                "documentation": "The writet statement writes a tape record to the attached magnetic media from the specified variable.",
                "detail": "WRITET $exp THEN\n\t$then_statements\nEND ELSE\n\t$else_statements\nEND",
                "snippet": "WRITET ${1:exp} THEN\n\t${2:then_statements}\nEND ELSE\n\t${3:else_statements}\nEND"
            },
            {
                "key": "Writeu",
                "icon": 14,
                "documentation": "The writeu form of the write statement writes a dynamic array into the specified file variable and keeps items locked that were locked by a previous readu or readvu statement.",
                "detail": "WRITEU $var TO $filevar,$recordkey",
                "snippet": "WRITEU ${1:var} TO ${2:filevar},${3:recordkey}"
            },
            {
                "key": "Writev",
                "icon": 14,
                "documentation": "The writev statement writes the value of an expression into the attribute designated in the attribute expression parameter, using the item-ID specified in ID.exp.",
                "detail": "WRITEV $var ON $filevar,$recordkey,$attr",
                "snippet": "WRITEV ${1:var} ON ${2:filevar},${3:recordkey},${4:attr}"
            },
            {
                "key": "Writevu",
                "icon": 14,
                "documentation": "The writevu form of this statement is identical to writev, except that the item remains locked.",
                "detail": "WRITEVU $var TO $filevar,$recordkey,$attr",
                "snippet": "WRITEVU ${1:var} TO ${2:filevar},${3:recordkey},${4:attr}"
            },
            {
                "key": "Writex",
                "icon": 14,
                "documentation": "The writex statement writes the item specified in dyn.array.var into the specified file, using the item-ID specified in the ID.exp. The writex statement will wait until the actual disk update takes place before continuing execution of the program. This is used for \"critical\" write-through, such as error-logging.",
                "detail": "WRITEX $dynarr ON $filevar,$recordkey",
                "snippet": "WRITEX ${1:dynarr} ON ${2:filevar},${3:recordkey}"
            },
            {
                "key": "Xtd",
                "icon": 3,
                "documentation": "The xtd() function converts an expression from its hexadecimal format into its equivalent decimal format.",
                "detail": "XTD($expr)",
                "snippet": "XTD(${1:expr})"
            }
        ]
    }
}
