{
    "Language": {
        "Type": "MVON# Basic",
        "Keywords": [
            {
                "key": "For",
                "icon": 14,
                "documentation": "The FOR statement begin a FOR\/NEXT Loop",
                "detail": "FOR var = start TO end {STEP incr}\r\n\r\n{UNTIL\/WHITE condition}\r\nNEXT var",
                "snippet": "FOR ${1:var} = ${2:start} TO ${3:end} \n\t${4:statements}\nNEXT ${5:var}"
            },
            {
                "key": "Open",
                "icon": 14,
                "documentation": "The OPEN statement opens a file for data processing.\r\nIf the OPEN statement fails, it executes any statements associated with an ELSE clause. If the OPEN is successful it will execute any statements associated with a THEN clause. Note that either one or both of the THEN and ELSE clauses are required.",
                "detail": "OPEN {'DICT'},filename TO filevariable {ON ERROR} THEN\/ELSE",
                "snippet": "OPEN ${1:filename} TO ${2:filevariable} ELSE ${3:statements}"
            },
            {
                "key": "Dcount",
                "icon": 3,
                "documentation": "The DCOUNT function counts the number of delimited elements in an expression.",
                "detail": "DCOUNT(expr1,Expr2)",
                "snippet": "DCOUNT(${1:expr1}, ${2:expr2})"
            },
            {
                "key": "Date()",
                "icon": 3,
                "documentation": "The internal form of the date is expressed as the number of days before or since December 31, 1967. The internal format of December 31, 1967 is zero, any day before is returned as a negative number any day past is returned as a positive number.",
                "detail": "DATE()",
                "snippet": "DATE()"
            },
            {
                "key": "Select",
                "icon": 14,
                "documentation": "The SELECT statement creates a select list of elements in a specified variable or list number. If no list number or variable is present, the default select list '0' is used.",
                "detail": "SELECT filevariable TO listnum\r\nSELECT filevariable TO variable",
                "snippet": "SELECT ${1:filevariable} TO ${2:listnum}"
            },
            {
                "key": "ReadNext",
                "icon": 14,
                "documentation": "The READNEXT statement reads the next entry from a list number or variable. If no list number or variable is specified, the default listy '0' is used. If an entry is available the THEN clause is execute otherwise the ELSE clause is executed",
                "detail": "READNEXT var FROM listnumber THEN\/ELSE\r\nREADNEXT var from variable THEN\/ELSE",
                "snippet": "READNEXT ${1:var} FROM ${2:listnumber} THEN ${3:statement}"
            },
            {
                "key": "Read",
                "icon": 14,
                "documentation": "The READ statement reads a record from a file with supplied key. If the key exists the THEN statements are executed otherwise the ELSE statements are executed. the ON ERROR clause is executed if am error occurs during the READ process.",
                "detail": "READ record FROM filevariable, key {ON ERROR} THEN\/ELSE",
                "snippet": "READ ${1:record} FROM ${2:filevariable}, ${3:key} THEN ${4:statements}"
            },
            {
                "key": "Readv",
                "icon": 14,
                "documentation": "The READV statement reads an attribute from a record from a file with supplied key. If the key exists the THEN statements are executed otherwise the ELSE statements are executed. the ON ERROR clause is executed if am error occurs during the READ process.",
                "detail": "READV record FROM filevariable, key, attribute {ON ERROR} THEN\/ELSE",
                "snippet": "READV ${1:record} FROM ${2:filevariable}, ${3:key}, ${4:attribute} THEN ${5:statement}"
            },
            {
                "key": "Repeat",
                "icon": 14,
                "documentation": "The REPEAT statement marks the end of a LOOP statement",
                "detail": "REPEAT",
                "snippet": "REPEAT"
            },
            {
                "key": "Crt",
                "icon": 14,
                "documentation": "The CRT statement displays text to terminal window. If the optional ':' is appended no carraige return is appended to the text",
                "detail": "CRT expression\r\nCRT expression:",
                "snippet": "CRT ${1:expression}"
            },
            {
                "key": "Dim",
                "icon": 14,
                "documentation": "The DIM statement creates a dimessioned array with supplied no of elements. A dimensioned array can be single or multidemension.",
                "detail": "DIM variable(depth)\r\nDIM variable(depth,width)",
                "snippet": "DIM ${1:variable}(${2:depth})"
            },
            {
                "key": "Debug",
                "icon": 14,
                "documentation": "The DEBUG statement forces a program to enter the debugger at a specific point. This only applies if the program has been compiled in debug mode.\r\nBASIC filename programname (D",
                "detail": "DEBUG",
                "snippet": "DEBUG"
            },
            {
                "key": "Call",
                "icon": 14,
                "documentation": "The CALL statement passes program execution to another subroutine. The subroutine must be compiled and cataloged.",
                "detail": "CALL subroutine{(arg1,arg2,...)}\r\nCALL @variable{(arg1,arg2,...)}",
                "snippet": "CALL ${1:subroutine}(${2:args})"
            },
            {
                "key": "Trim",
                "icon": 3,
                "detail": "TRIM(expression)",
                "documentation": "The TRIM function removes all leading and trailing white space from a string",
                "snippet": "TRIM(${1:expr})"
            },
            {
                "key": "Trimf",
                "icon": 3,
                "documentation": "The TRIMF function removes all leading white space from a string",
                "detail": "TRIMF(expression)",
                "snippet": "TRIMF(${1:expression})"
            },
            {
                "key": "Trimb",
                "icon": 3,
                "documentation": "The TRIMB function removes all triling white space from a string",
                "detail": "TRIMB(expression)",
                "snippet": "TRIMB(${1:expression})"
            },
            {
                "key": "Len",
                "icon": 3,
                "documentation": "The LEN function return the length of an expression",
                "detail": "LEN(expression)",
                "snippet": "LEN(${1:expression})"
            },
            {
                "key": "Write",
                "icon": 14,
                "documentation": "The WRITE statement writes a record to file using the specified key. The file must be opened before the WRITE statement can be used. If an error occurs the ON ERROR clause is executed",
                "detail": "WRITE record ON filevariable , key {ON ERROR}",
                "snippet": "WRITE ${1:record} ON ${2:filevariable} , ${3:key}"
            },
            {
                "key": "Writev",
                "icon": 14,
                "documentation": "The WRITEV statement writes an attribute to file using the specified key and attribute number. The file must be opened before the WRITE statement can be used. If an error occurs the ON ERROR clause is executed",
                "detail": "WRITEV record ON filevariable , key , attribute {ON ERROR}",
                "snippet": "WRITEV ${1:record} ON ${2:filevariable} , ${3:key}, ${4:attribute}"
            },
            {
                "key": "Begin Case",
                "icon": 14,
                "documentation": "The BEGIN CASE statement starts a case block. The block is terminates with an END CASE statement.",
                "detail": "BEGIN CASE\r\n\r\n...\r\nEND CASE",
                "snippet": "BEGIN CASE\n\tCASE $1\n\t\t$2\nEND CASE"
            },
            {
                "key": "Case",
                "icon": 14,
                "documentation": "The CASE statement performs a test and if it resolves to true, all statement below the CASE are executed until the next CASE statement or END CASE statement",
                "detail": "CASE expr operator value",
                "snippet": "CASE ${1:expr}"
            },
            {
                "key": "Abs",
                "icon": 3,
                "documentation": "The ABS function returns the absolute value of an expression",
                "detail": "ABS(expression)",
                "snippet": "ABS(${1:expression})"
            },
            {
                "key": "Index",
                "icon": 3,
                "documentation": "The INDEX function returns the position of a sub string in a string. The optional occurance value set the occurance of the sub string in a string",
                "detail": "INDEX(expression,substring)\r\nINDEX(expression,substring,occurance)",
                "snippet": "INDEX(${1:expression}, ${2:substring}, ${3:occurance})"
            },
            {
                "key": "@Am",
                "icon": 21,
                "documentation": "Return the attribute marker CHAR(254)",
                "detail": "@AM"
            },
            {
                "key": "@Vm",
                "icon": 21,
                "documentation": "Return the value marker CHAR(253)",
                "detail": "@VM"
            },
            {
                "key": "@Svm",
                "icon": 21,
                "documentation": "Return the subvalue marker CHAR(252)",
                "detail": "@SVM"
            },
            {
                "key": "@Tm",
                "icon": 21,
                "documentation": "Return the text marker CHAR(251)",
                "detail": "@TM"
            },
            {
                "key": "Execute",
                "icon": 3,
                "documentation": "The EXECUTE statement executes the supplied arguments at a TCL level. If the oiptional {CAPTURING variable} clause is supplied, all terminal io from the statement will be returned in the variable. A active select list can be passed to the statement by specifying {PASSLIST listno}. If the optional {SETTING variable} is specified, the no of items selected will be returned in the variable",
                "detail": "EXECUTE statements {PASSLIST listnumber} {Capturing variable} {SETTING variable}",
                "snippet": "EXECUTE ${1:statements}"
            },
            {
                "key": "Loop",
                "icon": 14,
                "documentation": "The LOOP statement begins a code block for looping. The loop is exited when either the WHILE\/UNTIL is satisfield or the EXIT clause is executed",
                "detail": "LOOP\r\n\r\n{UNTIL\/WHILE condition}\r\n\r\nREPEAT",
                "snippet": "LOOP ${1|WHILE,UNTIL|} ${2:condition}\n\t${3:statment}\nREPEAT"
            },
            {
                "key": "End Case",
                "icon": 3,
                "documentation": "The END CASE statement terminates a CASE block. There should be a corrosponding END CASE for each BEGIN CASE.",
                "detail": "END CASE",
                "snippet": "END CASE"
            },
            {
                "key": "End",
                "icon": 14,
                "documentation": "The END statement terminates a THEN\/ELSE block.",
                "detail": "END",
                "snippet": "END"
            },
            {
                "key": "Upcase",
                "icon": 3,
                "documentation": "The UPCASE function converts an expression to all upper case characters.",
                "detail": "UPCASE(expression)",
                "snippet": "UPCASE(${1:expression})"
            },
            {
                "key": "Downcase",
                "icon": 3,
                "documentation": "The DOWNCASE function converts an expression to all lower case characters.",
                "detail": "DOWNCASE(expression)",
                "snippet": "DOWNCASE(${1:expression})"
            },
            {
                "key": "Dquote",
                "icon": 3,
                "documentation": "The DQUOTE function return a string enclosed in double quotes.",
                "detail": "DQUOTE(Expression)",
                "snippet": "DQUOTE(${1:Expression})"
            },
            {
                "key": "Squote",
                "icon": 3,
                "documentation": "The SQUOTE function return a string enclosed in single quotes.",
                "detail": "SQUOTE(Expression)",
                "snippet": "SQUOTE(${1:Expression})"
            },
            {
                "key": "Print",
                "icon": 14,
                "documentation": "The PRINT statement sends out to a print channel. If no printer is on, the output goes to the terminal.\r\nThe optional : at the end will suppress a carriage return being appended to the expression",
                "detail": "PRINT $expression",
                "snippet": "PRINT ${1:expression}"
            },
            {
                "key": "Printer On",
                "icon": 14,
                "documentation": "The PRINTER ON statement turns on the printing on to the printer.",
                "detail": "PRINTER ON",
                "snippet": "PRINTER ON"
            },
            {
                "key": "Printer Off",
                "icon": 14,
                "documentation": "The PRINTER OFF statement turns off printing to the printer. All subsequent PRINT statements will print to the terminal.",
                "detail": "PRINTER OFF",
                "snippet": "PRINTER OFF"
            },
            {
                "key": "Printer Close",
                "icon": 14,
                "documentation": "The PRINTER CLOSE statement closes the print channel. All data spooled will begin printing",
                "detail": "PRINTER CLOSE",
                "snippet": "PRINTER CLOSE"
            },
            {
                "key": "Oconv",
                "icon": 3,
                "documentation": "The OCONV() function converts the value of expression to its external representation according to the conversion codes specified in conversioncode.",
                "detail": "OCONV(expression,conversioncode)",
                "snippet": "OCONV(${1:expression}, ${2:conversioncode})"
            },
            {
                "key": "Iconv",
                "icon": 3,
                "documentation": "The OCONV() function converts the value of expression to its internal representation according to the conversion codes in conversioncode.",
                "detail": "ICONV(expression,conversioncode)",
                "snippet": "ICONV(${1:expression}, ${2:conversioncode})"
            },
            {
                "key": "Int",
                "icon": 3,
                "documentation": "The INT function returns the integer portion of a number with no decimal points.",
                "detail": "INT(expression)",
                "snippet": "INT(${1:expression})"
            },
            {
                "key": "$Include",
                "icon": 14,
                "documentation": "The $INCLUDE directive inserts the program specified into the current source code. If the optional filename is specified the code is read from the file.",
                "detail": "$INCLUDE programname\r\n$INCLUDE filename programname",
                "snippet": "$INCLUDE ${1:programname}"
            },
            {
                "key": "Next",
                "icon": 14,
                "documentation": "The NEXT statement terminates a FOR loop. Control is passed back to the FOR statement and the variable is incremented or decremented.",
                "detail": "NEXT variable",
                "snippet": "NEXT ${1:variable}"
            },
            {
                "key": "Continue",
                "icon": 14,
                "documentation": "The Continue statement returns program execution to the top of the FOR\/LOOP loop.",
                "detail": "CONTINUE",
                "snippet": "CONTINUE"
            },
            {
                "key": "Return",
                "icon": 14,
                "documentation": "The RETURN statement returns program execution to the following statement after a GOSUB. It also returns from a BASIC subroutine if no GOSUB is active.\r\nThe second form of the RETURN statment is used in a FUNCTION call, expression is returned as the value for the function",
                "detail": "RETURN\r\nRETURN(expression)",
                "snippet": "RETURN"
            },
            {
                "key": "Exit",
                "icon": 3,
                "documentation": "The EXIT statement exits a LOOP or FOR loop.",
                "detail": "EXIT",
                "snippet": "EXIT"
            },
            {
                "key": "Change",
                "icon": 3,
                "documentation": "The CHANGE function replaces one string with another in an expression.",
                "detail": "CHANGE(Expression,oldstring,newstring)",
                "snippet": "CHANGE(${1:Expression}, ${2:oldstring}, ${3:newstring})"
            },
            {
                "key": "Lower",
                "icon": 3,
                "documentation": "The LOWER function lowers each marker by 1. AM > VM, VM > SVM etc",
                "detail": "Lower(Expression)",
                "snippet": "Lower(${1:Expression})"
            },
            {
                "key": "Raise",
                "icon": 3,
                "documentation": "The RAISE function raises each marker by 1. SVM > VM, VM > AM etc.",
                "detail": "RAISE(Expression)",
                "snippet": "RAISE(${1:Expression})"
            },
            {
                "key": "Delete",
                "icon": 3,
                "documentation": "The DELETE functions removes an attrribute, value or subvalue from a dynamic array.",
                "detail": "DELETE(variable,am)\r\nDELETE(variable,am,vm)\r\nDELETE(variable,am,vm,svm)",
                "snippet": "DELETE(${1:variable}, ${2:am})"
            },
            {
                "key": "Delete",
                "icon": 14,
                "documentation": "The DELETE Statement delete a record from a file",
                "detail": "DELETE filevariable , recordid",
                "snippet": "DELETE ${1:filevariable}, ${2:recordid}"
            },
            {
                "key": "Convert",
                "icon": 14,
                "documentation": "The CONVERT statement converts a series of characters to alternate characters in a dynamic array. If characters contains more that 1 character, each character is converted to the corrosponding character in newcharacters",
                "detail": "CONVERT characters TO newcharacters IN variable",
                "snippet": "CONVERT ${1:characters} TO ${2:newcharacters} IN ${3:variable}"
            },
            {
                "key": "Begin Transaction",
                "icon": 14,
                "documentation": "The BEGIN TRANSACTION statement indicates the start of a transaction. All writes are batched together and are only commited when the COMMIT statement is execute.",
                "detail": "",
                "snippet": "BEGIN TRANSACTION"
            },
            {
                "key": "End Transaction",
                "icon": 14,
                "documentation": "The END TRANSACTION statement indicates the end of a transaction. After a COMMIT or ROLLBACK, execution continues at the statements following the END TRANSACTION.",
                "detail": "END TRANSACTION",
                "snippet": "END TRANSACTION"
            },
            {
                "key": "Commit",
                "icon": 14,
                "documentation": "The COMMIT statement commits all writes in the transaction to the disk and continues executing at the statement following the END TRANSCTION.",
                "detail": "COMMIT",
                "snippet": "COMMIT"
            },
            {
                "key": "Rollback",
                "icon": 14,
                "documentation": "The ROLLBACK statement discards all writes in the transaction and continues executing at the statement following the END TRANSCTION.",
                "detail": "ROLLBACK",
                "snippet": "ROLLBACK"
            },
            {
                "key": "Readu",
                "icon": 14,
                "documentation": "The READU statement reads a record from a file with supplied key and attempts to lock the record. If the record is already locked the statements following the LOCKED clause are executed. If no LOCKED clause is present, execution stops and the record is released. If the key exists the THEN statements are executed otherwise the ELSE statements are executed. the ON ERROR clause is executed if am error occurs during the READ process.",
                "detail": "READU record FROM filevariable, key {LOCKED} {ON ERROR} THEN\/ELSE",
                "snippet": "READU ${1:record} FROM ${2:filevariable}, ${3:key} THEN ${4:then_statement} ELSE ${5:else_statement}"
            },
            {
                "key": "Writeu",
                "icon": 14,
                "documentation": "The WRITEU statements writes the record to a file using the key. If the record was previously locked, the lock is not removed and must be explicitly released using the RELEASE statement",
                "detail": "WRITEU record ON filevariable , key",
                "snippet": "WRITEU ${1:record} ON ${2:filevariable}, ${3:key}"
            },
            {
                "key": "Program",
                "icon": 14,
                "documentation": "The PROGRAM statement defines this code as a program with no arguments. If must be the first statement in your code",
                "detail": "PROGRAM",
                "snippet": "PROGRAM"
            },
            {
                "key": "Subroutine",
                "icon": 14,
                "documentation": "The SUBROUTINE statement defines this code as a subroutine with optional arguments. Subroutines are called with the BASIC CALL statement.If must be the first statement in your code",
                "detail": "SUBROUTINE subroutinename\r\nSUBROUTINE suboutinename(arg1,...)",
                "snippet": "SUBROUTINE ${1:subroutinename}(${2:args})"
            },
            {
                "key": "End Else",
                "icon": 14,
                "documentation": "The END ELSE terminates the THEN portion and begin the ELSE portion of a code block",
                "detail": "END ELSE",
                "snippet": "END ELSE"
            },
            {
                "key": "Readlist",
                "icon": 14,
                "documentation": "The READLIST statement reads all the remaining keys from the list number or list variable into a dynamic array. If keys are present in the list the THEN clause is executed else the ELSE clause is exected",
                "detail": "READLIST variable FROM {listnumber|listvariable} THEN\/ELSE",
                "snippet": "READLIST ${1:variable} FROM ${2:list} THEN ${3:then_statements} ELSE ${4:else_statements}"
            },
            {
                "key": "Goto",
                "icon": 14,
                "documentation": "The GOTO statements transfer program execution to the label specified after the GOTO statement",
                "detail": "GOTO label\r\nGO label\r\nGO TO label",
                "snippet": "GOTO ${1:label}"
            },
            {
                "key": "Unassigned",
                "icon": 3,
                "documentation": "The UNASSIGNED function return True(1) when a variables has previously been assigned a value and False(0) when it has not bee assigned a value",
                "detail": "UNASSIGNED(variable)",
                "snippet": "UNASSIGNED(${1:variable})"
            },
            {
                "key": "Release",
                "icon": 14,
                "documentation": "The RELEASE statement release a record lock that was previously set with a READU. If only the filevariable argument is specified, all locks for that file are release. If no arguments are specified, all locks set by the user are released.",
                "detail": "RELEASE\r\nRELEASE filevariable\r\nRELEASE filevariable, key",
                "snippet": "RELEASE ${1:var}"
            },
            {
                "key": "Stop",
                "icon": 3,
                "documentation": "The STOP statement terminates the current program and return to the calling program or TCL.",
                "detail": "STOP",
                "snippet": "STOP"
            },
            {
                "key": "Equate",
                "icon": 3,
                "documentation": "The EQU\/EQUATE statement replaces all occurances of the equated definition with it's equivalant Value in your program.",
                "detail": "EQUATE definition TO value\r\nEQU definition TO value",
                "snippet": "EQUATE ${1:definition} TO ${2:value}"
            },
            {
                "key": "Field",
                "icon": 3,
                "documentation": "The FIELD function extracts a portion of an expression by splitting the string using the seperator provided and returning the element in the count position. If the optional notoretrun is specified, Field returns that number of fields inluding the seperator.",
                "detail": "FIELD(expression,seperator,count)\r\nFIELD(expression,seperator,count,notoreturn)",
                "snippet": "FIELD(${1:expression}, ${2:seperator}, ${3:count})"
            },
            {
                "key": "Not",
                "icon": 3,
                "documentation": "Then NOT function return True (1) if the expression results in False or blank and False if the expression results in True or positive",
                "detail": "NOT(Expression)",
                "snippet": "NOT(${1:Expression})"
            },
            {
                "key": "Common",
                "icon": 14,
                "documentation": "The COMMON statement allows you to define global variables across all programs that include the same common statement. If optional \/name\/ is supplied, this is a Named Common which allows you to create specific global variables associated with that common",
                "detail": "COM {\/name\/}variable,variable,...\r\nCOMMON {\/name\/}variable,variable,...",
                "snippet": "COM ${1:name}"
            },
            {
                "key": "Char",
                "icon": 3,
                "documentation": "The CHAR function returns the ascii character defined by the expression",
                "detail": "CHAR(expression)",
                "snippet": "CHAR(${1:expression})"
            },
            {
                "key": "FormList",
                "icon": 14,
                "documentation": "The FORMLIST statement converts a variable selectlist to a numbered selectlist",
                "detail": "FORMLIST variable TO Listnumber",
                "snippet": "FORMLIST ${1:variable} TO ${2:Listnumber}"
            },
            {
                "key": "Gosub",
                "icon": 3,
                "documentation": "The GOSUB statements transfers execution to the internal subroutine named. Exection is continued with the first statement after the GOSUB when a RETURN is encounterd",
                "detail": "GOSUB label{:}",
                "snippet": "GOSUB ${1:label}"
            }
        ]
    }
}
